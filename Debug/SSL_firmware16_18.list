
SSL_firmware16_18.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000285c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080029ec  080029ec  000129ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002a2c  08002a2c  00012a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002a34  08002a34  00012a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002a38  08002a38  00012a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08002a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          00003fc0  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003fd0  20003fd0  00020010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001c539  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000033e7  00000000  00000000  0003c579  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000b135  00000000  00000000  0003f960  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000df8  00000000  00000000  0004aa98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001360  00000000  00000000  0004b890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00007fb6  00000000  00000000  0004cbf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005a47  00000000  00000000  00054ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005a5ed  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002b10  00000000  00000000  0005a66c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080029d4 	.word	0x080029d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080029d4 	.word	0x080029d4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e2:	4a0e      	ldr	r2, [pc, #56]	; (800051c <HAL_InitTick+0x3c>)
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <HAL_InitTick+0x40>)
{
 80004e6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e8:	7818      	ldrb	r0, [r3, #0]
 80004ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ee:	fbb3 f3f0 	udiv	r3, r3, r0
 80004f2:	6810      	ldr	r0, [r2, #0]
 80004f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f8:	f000 f888 	bl	800060c <HAL_SYSTICK_Config>
 80004fc:	4604      	mov	r4, r0
 80004fe:	b958      	cbnz	r0, 8000518 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000500:	2d0f      	cmp	r5, #15
 8000502:	d809      	bhi.n	8000518 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000504:	4602      	mov	r2, r0
 8000506:	4629      	mov	r1, r5
 8000508:	f04f 30ff 	mov.w	r0, #4294967295
 800050c:	f000 f84a 	bl	80005a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000510:	4b04      	ldr	r3, [pc, #16]	; (8000524 <HAL_InitTick+0x44>)
 8000512:	4620      	mov	r0, r4
 8000514:	601d      	str	r5, [r3, #0]
 8000516:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000518:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800051a:	bd38      	pop	{r3, r4, r5, pc}
 800051c:	2000000c 	.word	0x2000000c
 8000520:	20000000 	.word	0x20000000
 8000524:	20000004 	.word	0x20000004

08000528 <HAL_Init>:
{
 8000528:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <HAL_Init+0x30>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800053a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000542:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f81b 	bl	8000580 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800054a:	200f      	movs	r0, #15
 800054c:	f7ff ffc8 	bl	80004e0 <HAL_InitTick>
  HAL_MspInit();
 8000550:	f002 f836 	bl	80025c0 <HAL_MspInit>
}
 8000554:	2000      	movs	r0, #0
 8000556:	bd08      	pop	{r3, pc}
 8000558:	40023c00 	.word	0x40023c00

0800055c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800055c:	4a03      	ldr	r2, [pc, #12]	; (800056c <HAL_IncTick+0x10>)
 800055e:	4b04      	ldr	r3, [pc, #16]	; (8000570 <HAL_IncTick+0x14>)
 8000560:	6811      	ldr	r1, [r2, #0]
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	440b      	add	r3, r1
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	20003d78 	.word	0x20003d78
 8000570:	20000000 	.word	0x20000000

08000574 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000574:	4b01      	ldr	r3, [pc, #4]	; (800057c <HAL_GetTick+0x8>)
 8000576:	6818      	ldr	r0, [r3, #0]
}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20003d78 	.word	0x20003d78

08000580 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000580:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000582:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000584:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000588:	041b      	lsls	r3, r3, #16
 800058a:	0c1b      	lsrs	r3, r3, #16
 800058c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000590:	0200      	lsls	r0, r0, #8
 8000592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000596:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800059a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800059c:	60d3      	str	r3, [r2, #12]
 800059e:	4770      	bx	lr
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005a6:	b530      	push	{r4, r5, lr}
 80005a8:	68dc      	ldr	r4, [r3, #12]
 80005aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b4:	2b04      	cmp	r3, #4
 80005b6:	bf28      	it	cs
 80005b8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005bc:	f04f 0501 	mov.w	r5, #1
 80005c0:	fa05 f303 	lsl.w	r3, r5, r3
 80005c4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c8:	bf8c      	ite	hi
 80005ca:	3c03      	subhi	r4, #3
 80005cc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ce:	4019      	ands	r1, r3
 80005d0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005d2:	fa05 f404 	lsl.w	r4, r5, r4
 80005d6:	3c01      	subs	r4, #1
 80005d8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005da:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	ea42 0201 	orr.w	r2, r2, r1
 80005e0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	bfaf      	iteee	ge
 80005e6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	f000 000f 	andlt.w	r0, r0, #15
 80005ee:	4b06      	ldrlt	r3, [pc, #24]	; (8000608 <HAL_NVIC_SetPriority+0x64>)
 80005f0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	bfa5      	ittet	ge
 80005f4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005f8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop
 8000604:	e000ed00 	.word	0xe000ed00
 8000608:	e000ed14 	.word	0xe000ed14

0800060c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800060c:	3801      	subs	r0, #1
 800060e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000612:	d20a      	bcs.n	800062a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	4a07      	ldr	r2, [pc, #28]	; (8000634 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000618:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	21f0      	movs	r1, #240	; 0xf0
 800061c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000620:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000622:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000624:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800062a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000e010 	.word	0xe000e010
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800063a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800063c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800063e:	bf0c      	ite	eq
 8000640:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000644:	f022 0204 	bicne.w	r2, r2, #4
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	4770      	bx	lr
 800064c:	e000e010 	.word	0xe000e010

08000650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000654:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000656:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000658:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000808 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800065c:	4a68      	ldr	r2, [pc, #416]	; (8000800 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800065e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800080c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000662:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000664:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000666:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800066a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800066c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000670:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000674:	45b6      	cmp	lr, r6
 8000676:	f040 80ae 	bne.w	80007d6 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800067a:	684c      	ldr	r4, [r1, #4]
 800067c:	f024 0710 	bic.w	r7, r4, #16
 8000680:	2f02      	cmp	r7, #2
 8000682:	d116      	bne.n	80006b2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000684:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000688:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800068c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000690:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000694:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000698:	f04f 0c0f 	mov.w	ip, #15
 800069c:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006a0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006a4:	690d      	ldr	r5, [r1, #16]
 80006a6:	fa05 f50b 	lsl.w	r5, r5, fp
 80006aa:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006ae:	f8ca 5020 	str.w	r5, [sl, #32]
 80006b2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006b6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006b8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006bc:	fa05 f50a 	lsl.w	r5, r5, sl
 80006c0:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006c2:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006c6:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006ca:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ce:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006d0:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006d4:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006d6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006da:	d811      	bhi.n	8000700 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80006dc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006de:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006e2:	68cf      	ldr	r7, [r1, #12]
 80006e4:	fa07 fc0a 	lsl.w	ip, r7, sl
 80006e8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80006ec:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006ee:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006f0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006f4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80006f8:	409f      	lsls	r7, r3
 80006fa:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80006fe:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000700:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000702:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000704:	688f      	ldr	r7, [r1, #8]
 8000706:	fa07 f70a 	lsl.w	r7, r7, sl
 800070a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800070c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800070e:	00e5      	lsls	r5, r4, #3
 8000710:	d561      	bpl.n	80007d6 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	f04f 0b00 	mov.w	fp, #0
 8000716:	f8cd b00c 	str.w	fp, [sp, #12]
 800071a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800071e:	4d39      	ldr	r5, [pc, #228]	; (8000804 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000720:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000724:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000728:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800072c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000730:	9703      	str	r7, [sp, #12]
 8000732:	9f03      	ldr	r7, [sp, #12]
 8000734:	f023 0703 	bic.w	r7, r3, #3
 8000738:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800073c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000740:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000744:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000748:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800074c:	f04f 0e0f 	mov.w	lr, #15
 8000750:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000754:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000756:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800075a:	d043      	beq.n	80007e4 <HAL_GPIO_Init+0x194>
 800075c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000760:	42a8      	cmp	r0, r5
 8000762:	d041      	beq.n	80007e8 <HAL_GPIO_Init+0x198>
 8000764:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000768:	42a8      	cmp	r0, r5
 800076a:	d03f      	beq.n	80007ec <HAL_GPIO_Init+0x19c>
 800076c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000770:	42a8      	cmp	r0, r5
 8000772:	d03d      	beq.n	80007f0 <HAL_GPIO_Init+0x1a0>
 8000774:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000778:	42a8      	cmp	r0, r5
 800077a:	d03b      	beq.n	80007f4 <HAL_GPIO_Init+0x1a4>
 800077c:	4548      	cmp	r0, r9
 800077e:	d03b      	beq.n	80007f8 <HAL_GPIO_Init+0x1a8>
 8000780:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000784:	42a8      	cmp	r0, r5
 8000786:	d039      	beq.n	80007fc <HAL_GPIO_Init+0x1ac>
 8000788:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800078c:	42a8      	cmp	r0, r5
 800078e:	bf14      	ite	ne
 8000790:	2508      	movne	r5, #8
 8000792:	2507      	moveq	r5, #7
 8000794:	fa05 f50c 	lsl.w	r5, r5, ip
 8000798:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800079c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800079e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007a0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007a2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007a6:	bf0c      	ite	eq
 80007a8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007aa:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007ac:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007ae:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007b0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007b4:	bf0c      	ite	eq
 80007b6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007b8:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007ba:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007bc:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007be:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007c2:	bf0c      	ite	eq
 80007c4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007c6:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80007c8:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80007ca:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007cc:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007ce:	bf54      	ite	pl
 80007d0:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80007d2:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80007d4:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007d6:	3301      	adds	r3, #1
 80007d8:	2b10      	cmp	r3, #16
 80007da:	f47f af44 	bne.w	8000666 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007de:	b005      	add	sp, #20
 80007e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007e4:	465d      	mov	r5, fp
 80007e6:	e7d5      	b.n	8000794 <HAL_GPIO_Init+0x144>
 80007e8:	2501      	movs	r5, #1
 80007ea:	e7d3      	b.n	8000794 <HAL_GPIO_Init+0x144>
 80007ec:	2502      	movs	r5, #2
 80007ee:	e7d1      	b.n	8000794 <HAL_GPIO_Init+0x144>
 80007f0:	2503      	movs	r5, #3
 80007f2:	e7cf      	b.n	8000794 <HAL_GPIO_Init+0x144>
 80007f4:	2504      	movs	r5, #4
 80007f6:	e7cd      	b.n	8000794 <HAL_GPIO_Init+0x144>
 80007f8:	2505      	movs	r5, #5
 80007fa:	e7cb      	b.n	8000794 <HAL_GPIO_Init+0x144>
 80007fc:	2506      	movs	r5, #6
 80007fe:	e7c9      	b.n	8000794 <HAL_GPIO_Init+0x144>
 8000800:	40013c00 	.word	0x40013c00
 8000804:	40020000 	.word	0x40020000
 8000808:	40023800 	.word	0x40023800
 800080c:	40021400 	.word	0x40021400

08000810 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000810:	b10a      	cbz	r2, 8000816 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000812:	6181      	str	r1, [r0, #24]
 8000814:	4770      	bx	lr
 8000816:	0409      	lsls	r1, r1, #16
 8000818:	e7fb      	b.n	8000812 <HAL_GPIO_WritePin+0x2>
	...

0800081c <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800081c:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800081e:	4604      	mov	r4, r0
 8000820:	2800      	cmp	r0, #0
 8000822:	d062      	beq.n	80008ea <HAL_I2C_Init+0xce>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000824:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000828:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800082c:	b91b      	cbnz	r3, 8000836 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800082e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000832:	f001 fef5 	bl	8002620 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000836:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000838:	4e2d      	ldr	r6, [pc, #180]	; (80008f0 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 800083a:	4d2e      	ldr	r5, [pc, #184]	; (80008f4 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 800083c:	2324      	movs	r3, #36	; 0x24
 800083e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000842:	6813      	ldr	r3, [r2, #0]
 8000844:	f023 0301 	bic.w	r3, r3, #1
 8000848:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800084a:	f000 faa5 	bl	8000d98 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800084e:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8000850:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000852:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000856:	42b3      	cmp	r3, r6
 8000858:	bf84      	itt	hi
 800085a:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 800085e:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8000860:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000862:	bf91      	iteee	ls
 8000864:	1c69      	addls	r1, r5, #1
 8000866:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 800086a:	fbb1 f1f5 	udivhi	r1, r1, r5
 800086e:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000870:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000872:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000874:	d821      	bhi.n	80008ba <HAL_I2C_Init+0x9e>
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	fbb0 f0f3 	udiv	r0, r0, r3
 800087c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000880:	2b03      	cmp	r3, #3
 8000882:	bf98      	it	ls
 8000884:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000886:	6a21      	ldr	r1, [r4, #32]
 8000888:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800088a:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800088c:	430b      	orrs	r3, r1
 800088e:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000890:	68e1      	ldr	r1, [r4, #12]
 8000892:	6923      	ldr	r3, [r4, #16]
 8000894:	430b      	orrs	r3, r1
 8000896:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000898:	69a1      	ldr	r1, [r4, #24]
 800089a:	6963      	ldr	r3, [r4, #20]
 800089c:	430b      	orrs	r3, r1
 800089e:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80008a0:	6813      	ldr	r3, [r2, #0]
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008a8:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80008aa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008ac:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80008ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80008b2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80008b4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 80008b8:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80008ba:	68a1      	ldr	r1, [r4, #8]
 80008bc:	b949      	cbnz	r1, 80008d2 <HAL_I2C_Init+0xb6>
 80008be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80008c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80008c6:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80008ca:	b163      	cbz	r3, 80008e6 <HAL_I2C_Init+0xca>
 80008cc:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80008d0:	e7d9      	b.n	8000886 <HAL_I2C_Init+0x6a>
 80008d2:	2119      	movs	r1, #25
 80008d4:	434b      	muls	r3, r1
 80008d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80008da:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80008de:	b113      	cbz	r3, 80008e6 <HAL_I2C_Init+0xca>
 80008e0:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80008e4:	e7cf      	b.n	8000886 <HAL_I2C_Init+0x6a>
 80008e6:	2001      	movs	r0, #1
 80008e8:	e7cd      	b.n	8000886 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 80008ea:	2001      	movs	r0, #1
}
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	bf00      	nop
 80008f0:	000186a0 	.word	0x000186a0
 80008f4:	000f4240 	.word	0x000f4240

080008f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008fc:	4604      	mov	r4, r0
 80008fe:	b918      	cbnz	r0, 8000908 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000900:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000902:	b002      	add	sp, #8
 8000904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000908:	6803      	ldr	r3, [r0, #0]
 800090a:	07dd      	lsls	r5, r3, #31
 800090c:	d410      	bmi.n	8000930 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800090e:	6823      	ldr	r3, [r4, #0]
 8000910:	0798      	lsls	r0, r3, #30
 8000912:	d458      	bmi.n	80009c6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000914:	6823      	ldr	r3, [r4, #0]
 8000916:	071a      	lsls	r2, r3, #28
 8000918:	f100 809a 	bmi.w	8000a50 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800091c:	6823      	ldr	r3, [r4, #0]
 800091e:	075b      	lsls	r3, r3, #29
 8000920:	f100 80b8 	bmi.w	8000a94 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000924:	69a2      	ldr	r2, [r4, #24]
 8000926:	2a00      	cmp	r2, #0
 8000928:	f040 8119 	bne.w	8000b5e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800092c:	2000      	movs	r0, #0
 800092e:	e7e8      	b.n	8000902 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000930:	4ba6      	ldr	r3, [pc, #664]	; (8000bcc <HAL_RCC_OscConfig+0x2d4>)
 8000932:	689a      	ldr	r2, [r3, #8]
 8000934:	f002 020c 	and.w	r2, r2, #12
 8000938:	2a04      	cmp	r2, #4
 800093a:	d007      	beq.n	800094c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800093c:	689a      	ldr	r2, [r3, #8]
 800093e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000942:	2a08      	cmp	r2, #8
 8000944:	d10a      	bne.n	800095c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	0259      	lsls	r1, r3, #9
 800094a:	d507      	bpl.n	800095c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800094c:	4b9f      	ldr	r3, [pc, #636]	; (8000bcc <HAL_RCC_OscConfig+0x2d4>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	039a      	lsls	r2, r3, #14
 8000952:	d5dc      	bpl.n	800090e <HAL_RCC_OscConfig+0x16>
 8000954:	6863      	ldr	r3, [r4, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d1d9      	bne.n	800090e <HAL_RCC_OscConfig+0x16>
 800095a:	e7d1      	b.n	8000900 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800095c:	6863      	ldr	r3, [r4, #4]
 800095e:	4d9b      	ldr	r5, [pc, #620]	; (8000bcc <HAL_RCC_OscConfig+0x2d4>)
 8000960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000964:	d111      	bne.n	800098a <HAL_RCC_OscConfig+0x92>
 8000966:	682b      	ldr	r3, [r5, #0]
 8000968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800096c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800096e:	f7ff fe01 	bl	8000574 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000972:	4d96      	ldr	r5, [pc, #600]	; (8000bcc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000974:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000976:	682b      	ldr	r3, [r5, #0]
 8000978:	039b      	lsls	r3, r3, #14
 800097a:	d4c8      	bmi.n	800090e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800097c:	f7ff fdfa 	bl	8000574 <HAL_GetTick>
 8000980:	1b80      	subs	r0, r0, r6
 8000982:	2864      	cmp	r0, #100	; 0x64
 8000984:	d9f7      	bls.n	8000976 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000986:	2003      	movs	r0, #3
 8000988:	e7bb      	b.n	8000902 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800098a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800098e:	d104      	bne.n	800099a <HAL_RCC_OscConfig+0xa2>
 8000990:	682b      	ldr	r3, [r5, #0]
 8000992:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000996:	602b      	str	r3, [r5, #0]
 8000998:	e7e5      	b.n	8000966 <HAL_RCC_OscConfig+0x6e>
 800099a:	682a      	ldr	r2, [r5, #0]
 800099c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009a0:	602a      	str	r2, [r5, #0]
 80009a2:	682a      	ldr	r2, [r5, #0]
 80009a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009a8:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d1df      	bne.n	800096e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80009ae:	f7ff fde1 	bl	8000574 <HAL_GetTick>
 80009b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009b4:	682b      	ldr	r3, [r5, #0]
 80009b6:	039f      	lsls	r7, r3, #14
 80009b8:	d5a9      	bpl.n	800090e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009ba:	f7ff fddb 	bl	8000574 <HAL_GetTick>
 80009be:	1b80      	subs	r0, r0, r6
 80009c0:	2864      	cmp	r0, #100	; 0x64
 80009c2:	d9f7      	bls.n	80009b4 <HAL_RCC_OscConfig+0xbc>
 80009c4:	e7df      	b.n	8000986 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009c6:	4b81      	ldr	r3, [pc, #516]	; (8000bcc <HAL_RCC_OscConfig+0x2d4>)
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	f012 0f0c 	tst.w	r2, #12
 80009ce:	d007      	beq.n	80009e0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009d0:	689a      	ldr	r2, [r3, #8]
 80009d2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009d6:	2a08      	cmp	r2, #8
 80009d8:	d111      	bne.n	80009fe <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	025e      	lsls	r6, r3, #9
 80009de:	d40e      	bmi.n	80009fe <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009e0:	4b7a      	ldr	r3, [pc, #488]	; (8000bcc <HAL_RCC_OscConfig+0x2d4>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	0795      	lsls	r5, r2, #30
 80009e6:	d502      	bpl.n	80009ee <HAL_RCC_OscConfig+0xf6>
 80009e8:	68e2      	ldr	r2, [r4, #12]
 80009ea:	2a01      	cmp	r2, #1
 80009ec:	d188      	bne.n	8000900 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	6921      	ldr	r1, [r4, #16]
 80009f2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009f6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009fa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009fc:	e78a      	b.n	8000914 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009fe:	68e2      	ldr	r2, [r4, #12]
 8000a00:	4b73      	ldr	r3, [pc, #460]	; (8000bd0 <HAL_RCC_OscConfig+0x2d8>)
 8000a02:	b1b2      	cbz	r2, 8000a32 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000a04:	2201      	movs	r2, #1
 8000a06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a08:	f7ff fdb4 	bl	8000574 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a0c:	4d6f      	ldr	r5, [pc, #444]	; (8000bcc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a0e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a10:	682b      	ldr	r3, [r5, #0]
 8000a12:	0798      	lsls	r0, r3, #30
 8000a14:	d507      	bpl.n	8000a26 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a16:	682b      	ldr	r3, [r5, #0]
 8000a18:	6922      	ldr	r2, [r4, #16]
 8000a1a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a1e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a22:	602b      	str	r3, [r5, #0]
 8000a24:	e776      	b.n	8000914 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a26:	f7ff fda5 	bl	8000574 <HAL_GetTick>
 8000a2a:	1b80      	subs	r0, r0, r6
 8000a2c:	2802      	cmp	r0, #2
 8000a2e:	d9ef      	bls.n	8000a10 <HAL_RCC_OscConfig+0x118>
 8000a30:	e7a9      	b.n	8000986 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000a32:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a34:	f7ff fd9e 	bl	8000574 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a38:	4d64      	ldr	r5, [pc, #400]	; (8000bcc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a3a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a3c:	682b      	ldr	r3, [r5, #0]
 8000a3e:	0799      	lsls	r1, r3, #30
 8000a40:	f57f af68 	bpl.w	8000914 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a44:	f7ff fd96 	bl	8000574 <HAL_GetTick>
 8000a48:	1b80      	subs	r0, r0, r6
 8000a4a:	2802      	cmp	r0, #2
 8000a4c:	d9f6      	bls.n	8000a3c <HAL_RCC_OscConfig+0x144>
 8000a4e:	e79a      	b.n	8000986 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a50:	6962      	ldr	r2, [r4, #20]
 8000a52:	4b60      	ldr	r3, [pc, #384]	; (8000bd4 <HAL_RCC_OscConfig+0x2dc>)
 8000a54:	b17a      	cbz	r2, 8000a76 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a56:	2201      	movs	r2, #1
 8000a58:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a5a:	f7ff fd8b 	bl	8000574 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a5e:	4d5b      	ldr	r5, [pc, #364]	; (8000bcc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a60:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a62:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a64:	079f      	lsls	r7, r3, #30
 8000a66:	f53f af59 	bmi.w	800091c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a6a:	f7ff fd83 	bl	8000574 <HAL_GetTick>
 8000a6e:	1b80      	subs	r0, r0, r6
 8000a70:	2802      	cmp	r0, #2
 8000a72:	d9f6      	bls.n	8000a62 <HAL_RCC_OscConfig+0x16a>
 8000a74:	e787      	b.n	8000986 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000a76:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a78:	f7ff fd7c 	bl	8000574 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a7c:	4d53      	ldr	r5, [pc, #332]	; (8000bcc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a7e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a80:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a82:	0798      	lsls	r0, r3, #30
 8000a84:	f57f af4a 	bpl.w	800091c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a88:	f7ff fd74 	bl	8000574 <HAL_GetTick>
 8000a8c:	1b80      	subs	r0, r0, r6
 8000a8e:	2802      	cmp	r0, #2
 8000a90:	d9f6      	bls.n	8000a80 <HAL_RCC_OscConfig+0x188>
 8000a92:	e778      	b.n	8000986 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a94:	4b4d      	ldr	r3, [pc, #308]	; (8000bcc <HAL_RCC_OscConfig+0x2d4>)
 8000a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a98:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a9c:	d128      	bne.n	8000af0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	9201      	str	r2, [sp, #4]
 8000aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aa2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000aa6:	641a      	str	r2, [r3, #64]	; 0x40
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aae:	9301      	str	r3, [sp, #4]
 8000ab0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ab2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ab4:	4d48      	ldr	r5, [pc, #288]	; (8000bd8 <HAL_RCC_OscConfig+0x2e0>)
 8000ab6:	682b      	ldr	r3, [r5, #0]
 8000ab8:	05d9      	lsls	r1, r3, #23
 8000aba:	d51b      	bpl.n	8000af4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000abc:	68a3      	ldr	r3, [r4, #8]
 8000abe:	4d43      	ldr	r5, [pc, #268]	; (8000bcc <HAL_RCC_OscConfig+0x2d4>)
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d127      	bne.n	8000b14 <HAL_RCC_OscConfig+0x21c>
 8000ac4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000acc:	f7ff fd52 	bl	8000574 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ad0:	4d3e      	ldr	r5, [pc, #248]	; (8000bcc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000ad2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ad4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ad8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ada:	079b      	lsls	r3, r3, #30
 8000adc:	d539      	bpl.n	8000b52 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f43f af20 	beq.w	8000924 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ae4:	4a39      	ldr	r2, [pc, #228]	; (8000bcc <HAL_RCC_OscConfig+0x2d4>)
 8000ae6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	e719      	b.n	8000924 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000af0:	2600      	movs	r6, #0
 8000af2:	e7df      	b.n	8000ab4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000af4:	682b      	ldr	r3, [r5, #0]
 8000af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000afc:	f7ff fd3a 	bl	8000574 <HAL_GetTick>
 8000b00:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b02:	682b      	ldr	r3, [r5, #0]
 8000b04:	05da      	lsls	r2, r3, #23
 8000b06:	d4d9      	bmi.n	8000abc <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b08:	f7ff fd34 	bl	8000574 <HAL_GetTick>
 8000b0c:	1bc0      	subs	r0, r0, r7
 8000b0e:	2802      	cmp	r0, #2
 8000b10:	d9f7      	bls.n	8000b02 <HAL_RCC_OscConfig+0x20a>
 8000b12:	e738      	b.n	8000986 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b14:	2b05      	cmp	r3, #5
 8000b16:	d104      	bne.n	8000b22 <HAL_RCC_OscConfig+0x22a>
 8000b18:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b1a:	f043 0304 	orr.w	r3, r3, #4
 8000b1e:	672b      	str	r3, [r5, #112]	; 0x70
 8000b20:	e7d0      	b.n	8000ac4 <HAL_RCC_OscConfig+0x1cc>
 8000b22:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b24:	f022 0201 	bic.w	r2, r2, #1
 8000b28:	672a      	str	r2, [r5, #112]	; 0x70
 8000b2a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b2c:	f022 0204 	bic.w	r2, r2, #4
 8000b30:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1ca      	bne.n	8000acc <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b36:	f7ff fd1d 	bl	8000574 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b3a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b3e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b40:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b42:	0798      	lsls	r0, r3, #30
 8000b44:	d5cb      	bpl.n	8000ade <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b46:	f7ff fd15 	bl	8000574 <HAL_GetTick>
 8000b4a:	1bc0      	subs	r0, r0, r7
 8000b4c:	4540      	cmp	r0, r8
 8000b4e:	d9f7      	bls.n	8000b40 <HAL_RCC_OscConfig+0x248>
 8000b50:	e719      	b.n	8000986 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b52:	f7ff fd0f 	bl	8000574 <HAL_GetTick>
 8000b56:	1bc0      	subs	r0, r0, r7
 8000b58:	4540      	cmp	r0, r8
 8000b5a:	d9bd      	bls.n	8000ad8 <HAL_RCC_OscConfig+0x1e0>
 8000b5c:	e713      	b.n	8000986 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b5e:	4d1b      	ldr	r5, [pc, #108]	; (8000bcc <HAL_RCC_OscConfig+0x2d4>)
 8000b60:	68ab      	ldr	r3, [r5, #8]
 8000b62:	f003 030c 	and.w	r3, r3, #12
 8000b66:	2b08      	cmp	r3, #8
 8000b68:	f43f aeca 	beq.w	8000900 <HAL_RCC_OscConfig+0x8>
 8000b6c:	4e1b      	ldr	r6, [pc, #108]	; (8000bdc <HAL_RCC_OscConfig+0x2e4>)
 8000b6e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b70:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b72:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b74:	d134      	bne.n	8000be0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b76:	f7ff fcfd 	bl	8000574 <HAL_GetTick>
 8000b7a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b7c:	682b      	ldr	r3, [r5, #0]
 8000b7e:	0199      	lsls	r1, r3, #6
 8000b80:	d41e      	bmi.n	8000bc0 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b82:	6a22      	ldr	r2, [r4, #32]
 8000b84:	69e3      	ldr	r3, [r4, #28]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b8a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b96:	4c0d      	ldr	r4, [pc, #52]	; (8000bcc <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b98:	0852      	lsrs	r2, r2, #1
 8000b9a:	3a01      	subs	r2, #1
 8000b9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ba0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000ba6:	f7ff fce5 	bl	8000574 <HAL_GetTick>
 8000baa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bac:	6823      	ldr	r3, [r4, #0]
 8000bae:	019a      	lsls	r2, r3, #6
 8000bb0:	f53f aebc 	bmi.w	800092c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bb4:	f7ff fcde 	bl	8000574 <HAL_GetTick>
 8000bb8:	1b40      	subs	r0, r0, r5
 8000bba:	2802      	cmp	r0, #2
 8000bbc:	d9f6      	bls.n	8000bac <HAL_RCC_OscConfig+0x2b4>
 8000bbe:	e6e2      	b.n	8000986 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bc0:	f7ff fcd8 	bl	8000574 <HAL_GetTick>
 8000bc4:	1bc0      	subs	r0, r0, r7
 8000bc6:	2802      	cmp	r0, #2
 8000bc8:	d9d8      	bls.n	8000b7c <HAL_RCC_OscConfig+0x284>
 8000bca:	e6dc      	b.n	8000986 <HAL_RCC_OscConfig+0x8e>
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	42470000 	.word	0x42470000
 8000bd4:	42470e80 	.word	0x42470e80
 8000bd8:	40007000 	.word	0x40007000
 8000bdc:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000be0:	f7ff fcc8 	bl	8000574 <HAL_GetTick>
 8000be4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000be6:	682b      	ldr	r3, [r5, #0]
 8000be8:	019b      	lsls	r3, r3, #6
 8000bea:	f57f ae9f 	bpl.w	800092c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bee:	f7ff fcc1 	bl	8000574 <HAL_GetTick>
 8000bf2:	1b00      	subs	r0, r0, r4
 8000bf4:	2802      	cmp	r0, #2
 8000bf6:	d9f6      	bls.n	8000be6 <HAL_RCC_OscConfig+0x2ee>
 8000bf8:	e6c5      	b.n	8000986 <HAL_RCC_OscConfig+0x8e>
 8000bfa:	bf00      	nop

08000bfc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bfc:	4913      	ldr	r1, [pc, #76]	; (8000c4c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000bfe:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c00:	688b      	ldr	r3, [r1, #8]
 8000c02:	f003 030c 	and.w	r3, r3, #12
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	d003      	beq.n	8000c12 <HAL_RCC_GetSysClockFreq+0x16>
 8000c0a:	2b08      	cmp	r3, #8
 8000c0c:	d003      	beq.n	8000c16 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c0e:	4810      	ldr	r0, [pc, #64]	; (8000c50 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c10:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c12:	4810      	ldr	r0, [pc, #64]	; (8000c54 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c14:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c16:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c18:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c1a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c1c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c20:	bf14      	ite	ne
 8000c22:	480c      	ldrne	r0, [pc, #48]	; (8000c54 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c24:	480a      	ldreq	r0, [pc, #40]	; (8000c50 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c26:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c2a:	bf18      	it	ne
 8000c2c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c2e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c32:	fba1 0100 	umull	r0, r1, r1, r0
 8000c36:	f7ff facb 	bl	80001d0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <HAL_RCC_GetSysClockFreq+0x50>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c42:	3301      	adds	r3, #1
 8000c44:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c46:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c4a:	bd08      	pop	{r3, pc}
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	00f42400 	.word	0x00f42400
 8000c54:	017d7840 	.word	0x017d7840

08000c58 <HAL_RCC_ClockConfig>:
{
 8000c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c5c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c5e:	4604      	mov	r4, r0
 8000c60:	b910      	cbnz	r0, 8000c68 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c62:	2001      	movs	r0, #1
 8000c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c68:	4b44      	ldr	r3, [pc, #272]	; (8000d7c <HAL_RCC_ClockConfig+0x124>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	f002 020f 	and.w	r2, r2, #15
 8000c70:	428a      	cmp	r2, r1
 8000c72:	d328      	bcc.n	8000cc6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c74:	6821      	ldr	r1, [r4, #0]
 8000c76:	078f      	lsls	r7, r1, #30
 8000c78:	d42d      	bmi.n	8000cd6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c7a:	07c8      	lsls	r0, r1, #31
 8000c7c:	d440      	bmi.n	8000d00 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c7e:	4b3f      	ldr	r3, [pc, #252]	; (8000d7c <HAL_RCC_ClockConfig+0x124>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	f002 020f 	and.w	r2, r2, #15
 8000c86:	4295      	cmp	r5, r2
 8000c88:	d366      	bcc.n	8000d58 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c8a:	6822      	ldr	r2, [r4, #0]
 8000c8c:	0751      	lsls	r1, r2, #29
 8000c8e:	d46c      	bmi.n	8000d6a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c90:	0713      	lsls	r3, r2, #28
 8000c92:	d507      	bpl.n	8000ca4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c94:	4a3a      	ldr	r2, [pc, #232]	; (8000d80 <HAL_RCC_ClockConfig+0x128>)
 8000c96:	6921      	ldr	r1, [r4, #16]
 8000c98:	6893      	ldr	r3, [r2, #8]
 8000c9a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c9e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ca2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ca4:	f7ff ffaa 	bl	8000bfc <HAL_RCC_GetSysClockFreq>
 8000ca8:	4b35      	ldr	r3, [pc, #212]	; (8000d80 <HAL_RCC_ClockConfig+0x128>)
 8000caa:	4a36      	ldr	r2, [pc, #216]	; (8000d84 <HAL_RCC_ClockConfig+0x12c>)
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000cb2:	5cd3      	ldrb	r3, [r2, r3]
 8000cb4:	40d8      	lsrs	r0, r3
 8000cb6:	4b34      	ldr	r3, [pc, #208]	; (8000d88 <HAL_RCC_ClockConfig+0x130>)
 8000cb8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cba:	200f      	movs	r0, #15
 8000cbc:	f7ff fc10 	bl	80004e0 <HAL_InitTick>
  return HAL_OK;
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cc6:	b2ca      	uxtb	r2, r1
 8000cc8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 030f 	and.w	r3, r3, #15
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d1c6      	bne.n	8000c62 <HAL_RCC_ClockConfig+0xa>
 8000cd4:	e7ce      	b.n	8000c74 <HAL_RCC_ClockConfig+0x1c>
 8000cd6:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cd8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cdc:	bf1e      	ittt	ne
 8000cde:	689a      	ldrne	r2, [r3, #8]
 8000ce0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000ce4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ce6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ce8:	bf42      	ittt	mi
 8000cea:	689a      	ldrmi	r2, [r3, #8]
 8000cec:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000cf0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	68a0      	ldr	r0, [r4, #8]
 8000cf6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cfa:	4302      	orrs	r2, r0
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	e7bc      	b.n	8000c7a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d00:	6862      	ldr	r2, [r4, #4]
 8000d02:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <HAL_RCC_ClockConfig+0x128>)
 8000d04:	2a01      	cmp	r2, #1
 8000d06:	d11d      	bne.n	8000d44 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d0e:	d0a8      	beq.n	8000c62 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d10:	4e1b      	ldr	r6, [pc, #108]	; (8000d80 <HAL_RCC_ClockConfig+0x128>)
 8000d12:	68b3      	ldr	r3, [r6, #8]
 8000d14:	f023 0303 	bic.w	r3, r3, #3
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d1c:	f7ff fc2a 	bl	8000574 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d20:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d24:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d26:	68b3      	ldr	r3, [r6, #8]
 8000d28:	6862      	ldr	r2, [r4, #4]
 8000d2a:	f003 030c 	and.w	r3, r3, #12
 8000d2e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d32:	d0a4      	beq.n	8000c7e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d34:	f7ff fc1e 	bl	8000574 <HAL_GetTick>
 8000d38:	1bc0      	subs	r0, r0, r7
 8000d3a:	4540      	cmp	r0, r8
 8000d3c:	d9f3      	bls.n	8000d26 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000d3e:	2003      	movs	r0, #3
}
 8000d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d44:	1e91      	subs	r1, r2, #2
 8000d46:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d48:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d4a:	d802      	bhi.n	8000d52 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d4c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d50:	e7dd      	b.n	8000d0e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d52:	f013 0f02 	tst.w	r3, #2
 8000d56:	e7da      	b.n	8000d0e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d58:	b2ea      	uxtb	r2, r5
 8000d5a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	429d      	cmp	r5, r3
 8000d64:	f47f af7d 	bne.w	8000c62 <HAL_RCC_ClockConfig+0xa>
 8000d68:	e78f      	b.n	8000c8a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d6a:	4905      	ldr	r1, [pc, #20]	; (8000d80 <HAL_RCC_ClockConfig+0x128>)
 8000d6c:	68e0      	ldr	r0, [r4, #12]
 8000d6e:	688b      	ldr	r3, [r1, #8]
 8000d70:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d74:	4303      	orrs	r3, r0
 8000d76:	608b      	str	r3, [r1, #8]
 8000d78:	e78a      	b.n	8000c90 <HAL_RCC_ClockConfig+0x38>
 8000d7a:	bf00      	nop
 8000d7c:	40023c00 	.word	0x40023c00
 8000d80:	40023800 	.word	0x40023800
 8000d84:	08002a11 	.word	0x08002a11
 8000d88:	2000000c 	.word	0x2000000c

08000d8c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000d8c:	4b01      	ldr	r3, [pc, #4]	; (8000d94 <HAL_RCC_GetHCLKFreq+0x8>)
 8000d8e:	6818      	ldr	r0, [r3, #0]
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	2000000c 	.word	0x2000000c

08000d98 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000da2:	5cd3      	ldrb	r3, [r2, r3]
 8000da4:	4a03      	ldr	r2, [pc, #12]	; (8000db4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000da6:	6810      	ldr	r0, [r2, #0]
}
 8000da8:	40d8      	lsrs	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	40023800 	.word	0x40023800
 8000db0:	08002a21 	.word	0x08002a21
 8000db4:	2000000c 	.word	0x2000000c

08000db8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000db8:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000dba:	4604      	mov	r4, r0
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	d036      	beq.n	8000e2e <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000dc4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000dc8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000dcc:	b91b      	cbnz	r3, 8000dd6 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000dce:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000dd2:	f001 fc4f 	bl	8002674 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000dd6:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000dd8:	68a0      	ldr	r0, [r4, #8]
 8000dda:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000de2:	680b      	ldr	r3, [r1, #0]
 8000de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000de8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000dea:	6863      	ldr	r3, [r4, #4]
 8000dec:	4303      	orrs	r3, r0
 8000dee:	68e0      	ldr	r0, [r4, #12]
 8000df0:	4303      	orrs	r3, r0
 8000df2:	6920      	ldr	r0, [r4, #16]
 8000df4:	4303      	orrs	r3, r0
 8000df6:	6960      	ldr	r0, [r4, #20]
 8000df8:	4303      	orrs	r3, r0
 8000dfa:	69e0      	ldr	r0, [r4, #28]
 8000dfc:	4303      	orrs	r3, r0
 8000dfe:	6a20      	ldr	r0, [r4, #32]
 8000e00:	4303      	orrs	r3, r0
 8000e02:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000e04:	4303      	orrs	r3, r0
 8000e06:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000e0a:	4303      	orrs	r3, r0
 8000e0c:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000e0e:	0c12      	lsrs	r2, r2, #16
 8000e10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e12:	f002 0204 	and.w	r2, r2, #4
 8000e16:	431a      	orrs	r2, r3
 8000e18:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000e1a:	69cb      	ldr	r3, [r1, #28]
 8000e1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e20:	61cb      	str	r3, [r1, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e22:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000e24:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e26:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000e28:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8000e2c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e2e:	2001      	movs	r0, #1
}
 8000e30:	bd10      	pop	{r4, pc}
	...

08000e34 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e34:	6a03      	ldr	r3, [r0, #32]
 8000e36:	f023 0301 	bic.w	r3, r3, #1
 8000e3a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e3c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000e3e:	6842      	ldr	r2, [r0, #4]
{
 8000e40:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000e42:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000e44:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000e46:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000e4a:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000e4c:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000e4e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000e52:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000e54:	4c0c      	ldr	r4, [pc, #48]	; (8000e88 <TIM_OC1_SetConfig+0x54>)
 8000e56:	42a0      	cmp	r0, r4
 8000e58:	d009      	beq.n	8000e6e <TIM_OC1_SetConfig+0x3a>
 8000e5a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e5e:	42a0      	cmp	r0, r4
 8000e60:	d005      	beq.n	8000e6e <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e62:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000e64:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000e66:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8000e68:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000e6a:	6203      	str	r3, [r0, #32]
} 
 8000e6c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8000e6e:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e70:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000e72:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000e76:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e78:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000e7a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e7e:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000e80:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e84:	4322      	orrs	r2, r4
 8000e86:	e7ec      	b.n	8000e62 <TIM_OC1_SetConfig+0x2e>
 8000e88:	40010000 	.word	0x40010000

08000e8c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000e8c:	6a03      	ldr	r3, [r0, #32]
 8000e8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e92:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e94:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000e96:	6842      	ldr	r2, [r0, #4]
{
 8000e98:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000e9a:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000e9c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8000e9e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000ea2:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000ea4:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000ea6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000eaa:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000eae:	4c0e      	ldr	r4, [pc, #56]	; (8000ee8 <TIM_OC3_SetConfig+0x5c>)
 8000eb0:	42a0      	cmp	r0, r4
 8000eb2:	d009      	beq.n	8000ec8 <TIM_OC3_SetConfig+0x3c>
 8000eb4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000eb8:	42a0      	cmp	r0, r4
 8000eba:	d005      	beq.n	8000ec8 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000ebc:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000ebe:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000ec0:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8000ec2:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000ec4:	6203      	str	r3, [r0, #32]
}
 8000ec6:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000ec8:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000eca:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000ecc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000ed0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000ed4:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000ed6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000eda:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000edc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000ee0:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8000ee4:	e7ea      	b.n	8000ebc <TIM_OC3_SetConfig+0x30>
 8000ee6:	bf00      	nop
 8000ee8:	40010000 	.word	0x40010000

08000eec <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000eec:	6a03      	ldr	r3, [r0, #32]
 8000eee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ef2:	6203      	str	r3, [r0, #32]
{
 8000ef4:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000ef6:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000ef8:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000efa:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000efc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000efe:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000f02:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000f06:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000f08:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000f0c:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000f10:	4d09      	ldr	r5, [pc, #36]	; (8000f38 <TIM_OC4_SetConfig+0x4c>)
 8000f12:	42a8      	cmp	r0, r5
 8000f14:	d009      	beq.n	8000f2a <TIM_OC4_SetConfig+0x3e>
 8000f16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f1a:	42a8      	cmp	r0, r5
 8000f1c:	d005      	beq.n	8000f2a <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000f1e:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000f20:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000f22:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8000f24:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000f26:	6204      	str	r4, [r0, #32]
}
 8000f28:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000f2a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000f2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000f30:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8000f34:	e7f3      	b.n	8000f1e <TIM_OC4_SetConfig+0x32>
 8000f36:	bf00      	nop
 8000f38:	40010000 	.word	0x40010000

08000f3c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f3c:	6803      	ldr	r3, [r0, #0]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	f042 0201 	orr.w	r2, r2, #1
 8000f44:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	f042 0201 	orr.w	r2, r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]
}
 8000f4e:	2000      	movs	r0, #0
 8000f50:	4770      	bx	lr

08000f52 <HAL_TIM_OC_MspInit>:
 8000f52:	4770      	bx	lr

08000f54 <HAL_TIM_Encoder_Start>:
{
 8000f54:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8000f56:	b189      	cbz	r1, 8000f7c <HAL_TIM_Encoder_Start+0x28>
 8000f58:	2904      	cmp	r1, #4
 8000f5a:	d007      	beq.n	8000f6c <HAL_TIM_Encoder_Start+0x18>
  TIMx->CCER &= ~tmp;
 8000f5c:	6a1a      	ldr	r2, [r3, #32]
 8000f5e:	f022 0201 	bic.w	r2, r2, #1
 8000f62:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8000f64:	6a1a      	ldr	r2, [r3, #32]
 8000f66:	f042 0201 	orr.w	r2, r2, #1
 8000f6a:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8000f6c:	6a1a      	ldr	r2, [r3, #32]
 8000f6e:	f022 0210 	bic.w	r2, r2, #16
 8000f72:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8000f74:	6a1a      	ldr	r2, [r3, #32]
 8000f76:	f042 0210 	orr.w	r2, r2, #16
 8000f7a:	e006      	b.n	8000f8a <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8000f7c:	6a1a      	ldr	r2, [r3, #32]
 8000f7e:	f022 0201 	bic.w	r2, r2, #1
 8000f82:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8000f84:	6a1a      	ldr	r2, [r3, #32]
 8000f86:	f042 0201 	orr.w	r2, r2, #1
 8000f8a:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	f042 0201 	orr.w	r2, r2, #1
 8000f92:	601a      	str	r2, [r3, #0]
}
 8000f94:	2000      	movs	r0, #0
 8000f96:	4770      	bx	lr

08000f98 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000f98:	4a2e      	ldr	r2, [pc, #184]	; (8001054 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8000f9a:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000f9c:	4290      	cmp	r0, r2
 8000f9e:	d012      	beq.n	8000fc6 <TIM_Base_SetConfig+0x2e>
 8000fa0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000fa4:	d00f      	beq.n	8000fc6 <TIM_Base_SetConfig+0x2e>
 8000fa6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000faa:	4290      	cmp	r0, r2
 8000fac:	d00b      	beq.n	8000fc6 <TIM_Base_SetConfig+0x2e>
 8000fae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fb2:	4290      	cmp	r0, r2
 8000fb4:	d007      	beq.n	8000fc6 <TIM_Base_SetConfig+0x2e>
 8000fb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fba:	4290      	cmp	r0, r2
 8000fbc:	d003      	beq.n	8000fc6 <TIM_Base_SetConfig+0x2e>
 8000fbe:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000fc2:	4290      	cmp	r0, r2
 8000fc4:	d11d      	bne.n	8001002 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8000fc6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000fcc:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000fce:	4a21      	ldr	r2, [pc, #132]	; (8001054 <TIM_Base_SetConfig+0xbc>)
 8000fd0:	4290      	cmp	r0, r2
 8000fd2:	d104      	bne.n	8000fde <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000fd4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	e028      	b.n	8001030 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000fde:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000fe2:	d0f7      	beq.n	8000fd4 <TIM_Base_SetConfig+0x3c>
 8000fe4:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <TIM_Base_SetConfig+0xc0>)
 8000fe6:	4290      	cmp	r0, r2
 8000fe8:	d0f4      	beq.n	8000fd4 <TIM_Base_SetConfig+0x3c>
 8000fea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fee:	4290      	cmp	r0, r2
 8000ff0:	d0f0      	beq.n	8000fd4 <TIM_Base_SetConfig+0x3c>
 8000ff2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ff6:	4290      	cmp	r0, r2
 8000ff8:	d0ec      	beq.n	8000fd4 <TIM_Base_SetConfig+0x3c>
 8000ffa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000ffe:	4290      	cmp	r0, r2
 8001000:	d0e8      	beq.n	8000fd4 <TIM_Base_SetConfig+0x3c>
 8001002:	4a16      	ldr	r2, [pc, #88]	; (800105c <TIM_Base_SetConfig+0xc4>)
 8001004:	4290      	cmp	r0, r2
 8001006:	d0e5      	beq.n	8000fd4 <TIM_Base_SetConfig+0x3c>
 8001008:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800100c:	4290      	cmp	r0, r2
 800100e:	d0e1      	beq.n	8000fd4 <TIM_Base_SetConfig+0x3c>
 8001010:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001014:	4290      	cmp	r0, r2
 8001016:	d0dd      	beq.n	8000fd4 <TIM_Base_SetConfig+0x3c>
 8001018:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800101c:	4290      	cmp	r0, r2
 800101e:	d0d9      	beq.n	8000fd4 <TIM_Base_SetConfig+0x3c>
 8001020:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001024:	4290      	cmp	r0, r2
 8001026:	d0d5      	beq.n	8000fd4 <TIM_Base_SetConfig+0x3c>
 8001028:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800102c:	4290      	cmp	r0, r2
 800102e:	d0d1      	beq.n	8000fd4 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8001030:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001032:	688b      	ldr	r3, [r1, #8]
 8001034:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001036:	680b      	ldr	r3, [r1, #0]
 8001038:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <TIM_Base_SetConfig+0xbc>)
 800103c:	4298      	cmp	r0, r3
 800103e:	d006      	beq.n	800104e <TIM_Base_SetConfig+0xb6>
 8001040:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001044:	4298      	cmp	r0, r3
 8001046:	d002      	beq.n	800104e <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8001048:	2301      	movs	r3, #1
 800104a:	6143      	str	r3, [r0, #20]
}
 800104c:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800104e:	690b      	ldr	r3, [r1, #16]
 8001050:	6303      	str	r3, [r0, #48]	; 0x30
 8001052:	e7f9      	b.n	8001048 <TIM_Base_SetConfig+0xb0>
 8001054:	40010000 	.word	0x40010000
 8001058:	40000400 	.word	0x40000400
 800105c:	40014000 	.word	0x40014000

08001060 <HAL_TIM_OC_Init>:
{
 8001060:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001062:	4604      	mov	r4, r0
 8001064:	b1a0      	cbz	r0, 8001090 <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001066:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800106a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800106e:	b91b      	cbnz	r3, 8001078 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001070:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_OC_MspInit(htim);
 8001074:	f7ff ff6d 	bl	8000f52 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001078:	2302      	movs	r3, #2
 800107a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 800107e:	6820      	ldr	r0, [r4, #0]
 8001080:	1d21      	adds	r1, r4, #4
 8001082:	f7ff ff89 	bl	8000f98 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001086:	2301      	movs	r3, #1
 8001088:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800108c:	2000      	movs	r0, #0
 800108e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001090:	2001      	movs	r0, #1
}
 8001092:	bd10      	pop	{r4, pc}

08001094 <HAL_TIM_PWM_Init>:
{
 8001094:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001096:	4604      	mov	r4, r0
 8001098:	b1a0      	cbz	r0, 80010c4 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800109a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800109e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010a2:	b91b      	cbnz	r3, 80010ac <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80010a4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80010a8:	f001 fb0a 	bl	80026c0 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 80010ac:	2302      	movs	r3, #2
 80010ae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80010b2:	6820      	ldr	r0, [r4, #0]
 80010b4:	1d21      	adds	r1, r4, #4
 80010b6:	f7ff ff6f 	bl	8000f98 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80010ba:	2301      	movs	r3, #1
 80010bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80010c0:	2000      	movs	r0, #0
 80010c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80010c4:	2001      	movs	r0, #1
}  
 80010c6:	bd10      	pop	{r4, pc}

080010c8 <HAL_TIM_Encoder_Init>:
{
 80010c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ca:	460c      	mov	r4, r1
  if(htim == NULL)
 80010cc:	4605      	mov	r5, r0
 80010ce:	2800      	cmp	r0, #0
 80010d0:	d041      	beq.n	8001156 <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 80010d2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80010d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010da:	b91b      	cbnz	r3, 80010e4 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 80010dc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Encoder_MspInit(htim);
 80010e0:	f001 fb2a 	bl	8002738 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80010e4:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;   
 80010e6:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80010e8:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;   
 80010ec:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80010f0:	6883      	ldr	r3, [r0, #8]
 80010f2:	f023 0307 	bic.w	r3, r3, #7
 80010f6:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 80010f8:	f7ff ff4e 	bl	8000f98 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 80010fc:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 80010fe:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001100:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001102:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001104:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 8001106:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8001108:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800110a:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800110c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001110:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001114:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8001118:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800111a:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800111e:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001120:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001128:	68e1      	ldr	r1, [r4, #12]
 800112a:	430b      	orrs	r3, r1
 800112c:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800112e:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001132:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8001136:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001138:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800113a:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800113e:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8001140:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001142:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8001146:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001148:	4317      	orrs	r7, r2
  htim->State= HAL_TIM_STATE_READY;
 800114a:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 800114c:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 800114e:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  return HAL_OK;
 8001152:	2000      	movs	r0, #0
 8001154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001156:	2001      	movs	r0, #1
}
 8001158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800115c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800115c:	6a03      	ldr	r3, [r0, #32]
 800115e:	f023 0310 	bic.w	r3, r3, #16
 8001162:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001164:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001166:	6842      	ldr	r2, [r0, #4]
{
 8001168:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 800116a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800116c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800116e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001172:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001176:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001178:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800117c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001180:	4c0d      	ldr	r4, [pc, #52]	; (80011b8 <TIM_OC2_SetConfig+0x5c>)
 8001182:	42a0      	cmp	r0, r4
 8001184:	d009      	beq.n	800119a <TIM_OC2_SetConfig+0x3e>
 8001186:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800118a:	42a0      	cmp	r0, r4
 800118c:	d005      	beq.n	800119a <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 800118e:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001190:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001192:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001194:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001196:	6203      	str	r3, [r0, #32]
}
 8001198:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800119a:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800119c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 800119e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80011a2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80011a6:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80011a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80011ac:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80011ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80011b2:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 80011b6:	e7ea      	b.n	800118e <TIM_OC2_SetConfig+0x32>
 80011b8:	40010000 	.word	0x40010000

080011bc <HAL_TIM_OC_ConfigChannel>:
{
 80011bc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim); 
 80011be:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80011c2:	2b01      	cmp	r3, #1
{
 80011c4:	4604      	mov	r4, r0
 80011c6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim); 
 80011ca:	d018      	beq.n	80011fe <HAL_TIM_OC_ConfigChannel+0x42>
 80011cc:	2301      	movs	r3, #1
 80011ce:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80011d2:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 80011d6:	461d      	mov	r5, r3
  switch (Channel)
 80011d8:	2a0c      	cmp	r2, #12
 80011da:	d80b      	bhi.n	80011f4 <HAL_TIM_OC_ConfigChannel+0x38>
 80011dc:	e8df f002 	tbb	[pc, r2]
 80011e0:	0a0a0a07 	.word	0x0a0a0a07
 80011e4:	0a0a0a10 	.word	0x0a0a0a10
 80011e8:	0a0a0a14 	.word	0x0a0a0a14
 80011ec:	18          	.byte	0x18
 80011ed:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80011ee:	6820      	ldr	r0, [r4, #0]
 80011f0:	f7ff fe20 	bl	8000e34 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim); 
 80011f4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80011f6:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim); 
 80011fa:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80011fe:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001200:	6820      	ldr	r0, [r4, #0]
 8001202:	f7ff ffab 	bl	800115c <TIM_OC2_SetConfig>
    break;
 8001206:	e7f5      	b.n	80011f4 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001208:	6820      	ldr	r0, [r4, #0]
 800120a:	f7ff fe3f 	bl	8000e8c <TIM_OC3_SetConfig>
    break;
 800120e:	e7f1      	b.n	80011f4 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001210:	6820      	ldr	r0, [r4, #0]
 8001212:	f7ff fe6b 	bl	8000eec <TIM_OC4_SetConfig>
    break;
 8001216:	e7ed      	b.n	80011f4 <HAL_TIM_OC_ConfigChannel+0x38>

08001218 <HAL_TIM_PWM_ConfigChannel>:
{
 8001218:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800121a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800121e:	2b01      	cmp	r3, #1
{
 8001220:	4604      	mov	r4, r0
 8001222:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001226:	d025      	beq.n	8001274 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001228:	2301      	movs	r3, #1
 800122a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800122e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8001232:	2a0c      	cmp	r2, #12
 8001234:	d818      	bhi.n	8001268 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001236:	e8df f002 	tbb	[pc, r2]
 800123a:	1707      	.short	0x1707
 800123c:	171e1717 	.word	0x171e1717
 8001240:	172f1717 	.word	0x172f1717
 8001244:	1717      	.short	0x1717
 8001246:	40          	.byte	0x40
 8001247:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001248:	6820      	ldr	r0, [r4, #0]
 800124a:	f7ff fdf3 	bl	8000e34 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800124e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001250:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001252:	699a      	ldr	r2, [r3, #24]
 8001254:	f042 0208 	orr.w	r2, r2, #8
 8001258:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800125a:	699a      	ldr	r2, [r3, #24]
 800125c:	f022 0204 	bic.w	r2, r2, #4
 8001260:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001262:	699a      	ldr	r2, [r3, #24]
 8001264:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001266:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001268:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800126a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800126c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001270:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001274:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001276:	6820      	ldr	r0, [r4, #0]
 8001278:	f7ff ff70 	bl	800115c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800127c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800127e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001280:	699a      	ldr	r2, [r3, #24]
 8001282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001286:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001288:	699a      	ldr	r2, [r3, #24]
 800128a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800128e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001290:	699a      	ldr	r2, [r3, #24]
 8001292:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001296:	e7e6      	b.n	8001266 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001298:	6820      	ldr	r0, [r4, #0]
 800129a:	f7ff fdf7 	bl	8000e8c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800129e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80012a0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80012a2:	69da      	ldr	r2, [r3, #28]
 80012a4:	f042 0208 	orr.w	r2, r2, #8
 80012a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80012aa:	69da      	ldr	r2, [r3, #28]
 80012ac:	f022 0204 	bic.w	r2, r2, #4
 80012b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80012b2:	69da      	ldr	r2, [r3, #28]
 80012b4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80012b6:	61da      	str	r2, [r3, #28]
    break;
 80012b8:	e7d6      	b.n	8001268 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80012ba:	6820      	ldr	r0, [r4, #0]
 80012bc:	f7ff fe16 	bl	8000eec <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80012c0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80012c2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80012c4:	69da      	ldr	r2, [r3, #28]
 80012c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80012cc:	69da      	ldr	r2, [r3, #28]
 80012ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80012d4:	69da      	ldr	r2, [r3, #28]
 80012d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80012da:	e7ec      	b.n	80012b6 <HAL_TIM_PWM_ConfigChannel+0x9e>

080012dc <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 80012dc:	6a03      	ldr	r3, [r0, #32]
{
 80012de:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 80012e0:	2401      	movs	r4, #1
 80012e2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80012e4:	ea23 0304 	bic.w	r3, r3, r4
 80012e8:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80012ea:	6a03      	ldr	r3, [r0, #32]
 80012ec:	408a      	lsls	r2, r1
 80012ee:	431a      	orrs	r2, r3
 80012f0:	6202      	str	r2, [r0, #32]
 80012f2:	bd10      	pop	{r4, pc}

080012f4 <HAL_TIM_PWM_Start>:
{
 80012f4:	b510      	push	{r4, lr}
 80012f6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80012f8:	2201      	movs	r2, #1
 80012fa:	6800      	ldr	r0, [r0, #0]
 80012fc:	f7ff ffee 	bl	80012dc <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	4a08      	ldr	r2, [pc, #32]	; (8001324 <HAL_TIM_PWM_Start+0x30>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d003      	beq.n	8001310 <HAL_TIM_PWM_Start+0x1c>
 8001308:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800130c:	4293      	cmp	r3, r2
 800130e:	d103      	bne.n	8001318 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8001310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001316:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]
} 
 8001320:	2000      	movs	r0, #0
 8001322:	bd10      	pop	{r4, pc}
 8001324:	40010000 	.word	0x40010000

08001328 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001328:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800132c:	2b01      	cmp	r3, #1
{
 800132e:	b510      	push	{r4, lr}
 8001330:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001334:	d018      	beq.n	8001368 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001336:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800133a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800133c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800133e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001340:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001342:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001346:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	4322      	orrs	r2, r4
 800134c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001354:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	430a      	orrs	r2, r1
 800135a:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800135c:	2301      	movs	r3, #1
 800135e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001362:	2300      	movs	r3, #0
 8001364:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001368:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 800136a:	bd10      	pop	{r4, pc}

0800136c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800136c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001370:	2b01      	cmp	r3, #1
 8001372:	d01f      	beq.n	80013b4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001374:	68cb      	ldr	r3, [r1, #12]
 8001376:	688a      	ldr	r2, [r1, #8]
 8001378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800137c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800137e:	684a      	ldr	r2, [r1, #4]
 8001380:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001384:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001386:	680a      	ldr	r2, [r1, #0]
 8001388:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800138c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800138e:	690a      	ldr	r2, [r1, #16]
 8001390:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001394:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001396:	694a      	ldr	r2, [r1, #20]
 8001398:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800139c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800139e:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80013a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013a4:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80013a6:	6802      	ldr	r2, [r0, #0]
 80013a8:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80013aa:	2300      	movs	r3, #0
 80013ac:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80013b0:	4618      	mov	r0, r3
 80013b2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80013b4:	2002      	movs	r0, #2
}
 80013b6:	4770      	bx	lr

080013b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80013b8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80013ba:	f000 fbe5 	bl	8001b88 <vTaskStartScheduler>
  
  return osOK;
}
 80013be:	2000      	movs	r0, #0
 80013c0:	bd08      	pop	{r3, pc}

080013c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80013c2:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80013c4:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80013c8:	8a02      	ldrh	r2, [r0, #16]
{
 80013ca:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80013cc:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 80013d0:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80013d2:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80013d4:	bf14      	ite	ne
 80013d6:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80013d8:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80013da:	a803      	add	r0, sp, #12
 80013dc:	9001      	str	r0, [sp, #4]
 80013de:	9400      	str	r4, [sp, #0]
 80013e0:	4628      	mov	r0, r5
 80013e2:	f000 fb01 	bl	80019e8 <xTaskCreate>
 80013e6:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80013e8:	bf0c      	ite	eq
 80013ea:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80013ec:	2000      	movne	r0, #0
}
 80013ee:	b005      	add	sp, #20
 80013f0:	bd30      	pop	{r4, r5, pc}

080013f2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80013f2:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80013f4:	2800      	cmp	r0, #0
 80013f6:	bf08      	it	eq
 80013f8:	2001      	moveq	r0, #1
 80013fa:	f000 fd13 	bl	8001e24 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80013fe:	2000      	movs	r0, #0
 8001400:	bd08      	pop	{r3, pc}

08001402 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001402:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001404:	f000 fda6 	bl	8001f54 <xTaskGetSchedulerState>
 8001408:	2801      	cmp	r0, #1
 800140a:	d003      	beq.n	8001414 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800140c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8001410:	f000 b908 	b.w	8001624 <xPortSysTickHandler>
 8001414:	bd08      	pop	{r3, pc}

08001416 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001416:	f100 0308 	add.w	r3, r0, #8
 800141a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800141c:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001420:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001422:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001424:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001426:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001428:	6003      	str	r3, [r0, #0]
 800142a:	4770      	bx	lr

0800142c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800142c:	2300      	movs	r3, #0
 800142e:	6103      	str	r3, [r0, #16]
 8001430:	4770      	bx	lr

08001432 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001432:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001434:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800143e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001440:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001442:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001444:	3301      	adds	r3, #1
 8001446:	6003      	str	r3, [r0, #0]
 8001448:	4770      	bx	lr

0800144a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800144a:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800144c:	1c53      	adds	r3, r2, #1
{
 800144e:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001450:	d10a      	bne.n	8001468 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001452:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001458:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800145a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800145c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800145e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001460:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001462:	3301      	adds	r3, #1
 8001464:	6003      	str	r3, [r0, #0]
 8001466:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001468:	f100 0308 	add.w	r3, r0, #8
 800146c:	685c      	ldr	r4, [r3, #4]
 800146e:	6825      	ldr	r5, [r4, #0]
 8001470:	42aa      	cmp	r2, r5
 8001472:	d3ef      	bcc.n	8001454 <vListInsert+0xa>
 8001474:	4623      	mov	r3, r4
 8001476:	e7f9      	b.n	800146c <vListInsert+0x22>

08001478 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001478:	6841      	ldr	r1, [r0, #4]
 800147a:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800147c:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800147e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001480:	6882      	ldr	r2, [r0, #8]
 8001482:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001484:	6859      	ldr	r1, [r3, #4]
 8001486:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001488:	bf08      	it	eq
 800148a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800148c:	2200      	movs	r2, #0
 800148e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	3801      	subs	r0, #1
 8001494:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001496:	4770      	bx	lr

08001498 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <prvTaskExitError+0x2c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	d008      	beq.n	80014b2 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80014a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a4:	f383 8811 	msr	BASEPRI, r3
 80014a8:	f3bf 8f6f 	isb	sy
 80014ac:	f3bf 8f4f 	dsb	sy
 80014b0:	e7fe      	b.n	80014b0 <prvTaskExitError+0x18>
 80014b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014b6:	f383 8811 	msr	BASEPRI, r3
 80014ba:	f3bf 8f6f 	isb	sy
 80014be:	f3bf 8f4f 	dsb	sy
 80014c2:	e7fe      	b.n	80014c2 <prvTaskExitError+0x2a>
 80014c4:	20000008 	.word	0x20000008

080014c8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <prvPortStartFirstTask+0x1c>)
 80014ca:	6800      	ldr	r0, [r0, #0]
 80014cc:	6800      	ldr	r0, [r0, #0]
 80014ce:	f380 8808 	msr	MSP, r0
 80014d2:	b662      	cpsie	i
 80014d4:	b661      	cpsie	f
 80014d6:	f3bf 8f4f 	dsb	sy
 80014da:	f3bf 8f6f 	isb	sy
 80014de:	df00      	svc	0
 80014e0:	bf00      	nop
 80014e2:	0000      	.short	0x0000
 80014e4:	e000ed08 	.word	0xe000ed08

080014e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80014e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80014f8 <vPortEnableVFP+0x10>
 80014ec:	6801      	ldr	r1, [r0, #0]
 80014ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80014f2:	6001      	str	r1, [r0, #0]
 80014f4:	4770      	bx	lr
 80014f6:	0000      	.short	0x0000
 80014f8:	e000ed88 	.word	0xe000ed88

080014fc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80014fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001500:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <pxPortInitialiseStack+0x28>)
 8001506:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800150a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800150e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001512:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001516:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800151a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800151e:	3844      	subs	r0, #68	; 0x44
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	08001499 	.word	0x08001499
	...

08001530 <SVC_Handler>:
	__asm volatile (
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <pxCurrentTCBConst2>)
 8001532:	6819      	ldr	r1, [r3, #0]
 8001534:	6808      	ldr	r0, [r1, #0]
 8001536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800153a:	f380 8809 	msr	PSP, r0
 800153e:	f3bf 8f6f 	isb	sy
 8001542:	f04f 0000 	mov.w	r0, #0
 8001546:	f380 8811 	msr	BASEPRI, r0
 800154a:	4770      	bx	lr
 800154c:	f3af 8000 	nop.w

08001550 <pxCurrentTCBConst2>:
 8001550:	20003c4c 	.word	0x20003c4c

08001554 <vPortEnterCritical>:
 8001554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001558:	f383 8811 	msr	BASEPRI, r3
 800155c:	f3bf 8f6f 	isb	sy
 8001560:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001564:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <vPortEnterCritical+0x3c>)
 8001566:	6813      	ldr	r3, [r2, #0]
 8001568:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800156a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800156c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800156e:	d10d      	bne.n	800158c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <vPortEnterCritical+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001578:	d008      	beq.n	800158c <vPortEnterCritical+0x38>
 800157a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800157e:	f383 8811 	msr	BASEPRI, r3
 8001582:	f3bf 8f6f 	isb	sy
 8001586:	f3bf 8f4f 	dsb	sy
 800158a:	e7fe      	b.n	800158a <vPortEnterCritical+0x36>
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000008 	.word	0x20000008
 8001594:	e000ed04 	.word	0xe000ed04

08001598 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001598:	4a08      	ldr	r2, [pc, #32]	; (80015bc <vPortExitCritical+0x24>)
 800159a:	6813      	ldr	r3, [r2, #0]
 800159c:	b943      	cbnz	r3, 80015b0 <vPortExitCritical+0x18>
 800159e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a2:	f383 8811 	msr	BASEPRI, r3
 80015a6:	f3bf 8f6f 	isb	sy
 80015aa:	f3bf 8f4f 	dsb	sy
 80015ae:	e7fe      	b.n	80015ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80015b0:	3b01      	subs	r3, #1
 80015b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80015b4:	b90b      	cbnz	r3, 80015ba <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80015b6:	f383 8811 	msr	BASEPRI, r3
 80015ba:	4770      	bx	lr
 80015bc:	20000008 	.word	0x20000008

080015c0 <PendSV_Handler>:
	__asm volatile
 80015c0:	f3ef 8009 	mrs	r0, PSP
 80015c4:	f3bf 8f6f 	isb	sy
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <pxCurrentTCBConst>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	f01e 0f10 	tst.w	lr, #16
 80015d0:	bf08      	it	eq
 80015d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80015d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015da:	6010      	str	r0, [r2, #0]
 80015dc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80015e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80015e4:	f380 8811 	msr	BASEPRI, r0
 80015e8:	f3bf 8f4f 	dsb	sy
 80015ec:	f3bf 8f6f 	isb	sy
 80015f0:	f000 fc76 	bl	8001ee0 <vTaskSwitchContext>
 80015f4:	f04f 0000 	mov.w	r0, #0
 80015f8:	f380 8811 	msr	BASEPRI, r0
 80015fc:	bc08      	pop	{r3}
 80015fe:	6819      	ldr	r1, [r3, #0]
 8001600:	6808      	ldr	r0, [r1, #0]
 8001602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001606:	f01e 0f10 	tst.w	lr, #16
 800160a:	bf08      	it	eq
 800160c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001610:	f380 8809 	msr	PSP, r0
 8001614:	f3bf 8f6f 	isb	sy
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	f3af 8000 	nop.w

08001620 <pxCurrentTCBConst>:
 8001620:	20003c4c 	.word	0x20003c4c

08001624 <xPortSysTickHandler>:
{
 8001624:	b508      	push	{r3, lr}
	__asm volatile
 8001626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800162a:	f383 8811 	msr	BASEPRI, r3
 800162e:	f3bf 8f6f 	isb	sy
 8001632:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001636:	f000 faeb 	bl	8001c10 <xTaskIncrementTick>
 800163a:	b118      	cbz	r0, 8001644 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <xPortSysTickHandler+0x28>)
 800163e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001642:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001644:	2300      	movs	r3, #0
 8001646:	f383 8811 	msr	BASEPRI, r3
 800164a:	bd08      	pop	{r3, pc}
 800164c:	e000ed04 	.word	0xe000ed04

08001650 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <vPortSetupTimerInterrupt+0x1c>)
 8001652:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	fbb3 f3f2 	udiv	r3, r3, r2
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <vPortSetupTimerInterrupt+0x20>)
 800165e:	3b01      	subs	r3, #1
 8001660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <vPortSetupTimerInterrupt+0x24>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	2000000c 	.word	0x2000000c
 8001670:	e000e014 	.word	0xe000e014
 8001674:	e000e010 	.word	0xe000e010

08001678 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001678:	4b31      	ldr	r3, [pc, #196]	; (8001740 <xPortStartScheduler+0xc8>)
 800167a:	4a32      	ldr	r2, [pc, #200]	; (8001744 <xPortStartScheduler+0xcc>)
{
 800167c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800167e:	6819      	ldr	r1, [r3, #0]
 8001680:	4291      	cmp	r1, r2
 8001682:	d108      	bne.n	8001696 <xPortStartScheduler+0x1e>
	__asm volatile
 8001684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001688:	f383 8811 	msr	BASEPRI, r3
 800168c:	f3bf 8f6f 	isb	sy
 8001690:	f3bf 8f4f 	dsb	sy
 8001694:	e7fe      	b.n	8001694 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <xPortStartScheduler+0xd0>)
 800169a:	429a      	cmp	r2, r3
 800169c:	d108      	bne.n	80016b0 <xPortStartScheduler+0x38>
 800169e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016a2:	f383 8811 	msr	BASEPRI, r3
 80016a6:	f3bf 8f6f 	isb	sy
 80016aa:	f3bf 8f4f 	dsb	sy
 80016ae:	e7fe      	b.n	80016ae <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80016b0:	4b26      	ldr	r3, [pc, #152]	; (800174c <xPortStartScheduler+0xd4>)
 80016b2:	781a      	ldrb	r2, [r3, #0]
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80016b8:	22ff      	movs	r2, #255	; 0xff
 80016ba:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80016bc:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80016be:	4a24      	ldr	r2, [pc, #144]	; (8001750 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80016c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80016ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016ce:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <xPortStartScheduler+0xdc>)
 80016d2:	2207      	movs	r2, #7
 80016d4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80016d6:	2100      	movs	r1, #0
 80016d8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80016dc:	0600      	lsls	r0, r0, #24
 80016de:	f102 34ff 	add.w	r4, r2, #4294967295
 80016e2:	d423      	bmi.n	800172c <xPortStartScheduler+0xb4>
 80016e4:	b101      	cbz	r1, 80016e8 <xPortStartScheduler+0x70>
 80016e6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80016ec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80016f0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80016f2:	9b01      	ldr	r3, [sp, #4]
 80016f4:	4a15      	ldr	r2, [pc, #84]	; (800174c <xPortStartScheduler+0xd4>)
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <xPortStartScheduler+0xe0>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001702:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800170a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800170c:	f7ff ffa0 	bl	8001650 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <xPortStartScheduler+0xe4>)
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8001716:	f7ff fee7 	bl	80014e8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800171a:	4a11      	ldr	r2, [pc, #68]	; (8001760 <xPortStartScheduler+0xe8>)
 800171c:	6813      	ldr	r3, [r2, #0]
 800171e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001722:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001724:	f7ff fed0 	bl	80014c8 <prvPortStartFirstTask>
	prvTaskExitError();
 8001728:	f7ff feb6 	bl	8001498 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800172c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001730:	0052      	lsls	r2, r2, #1
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	f88d 2003 	strb.w	r2, [sp, #3]
 8001738:	2101      	movs	r1, #1
 800173a:	4622      	mov	r2, r4
 800173c:	e7cc      	b.n	80016d8 <xPortStartScheduler+0x60>
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00
 8001744:	410fc271 	.word	0x410fc271
 8001748:	410fc270 	.word	0x410fc270
 800174c:	e000e400 	.word	0xe000e400
 8001750:	2000002c 	.word	0x2000002c
 8001754:	20000030 	.word	0x20000030
 8001758:	e000ed20 	.word	0xe000ed20
 800175c:	20000008 	.word	0x20000008
 8001760:	e000ef34 	.word	0xe000ef34

08001764 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001764:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <prvInsertBlockIntoFreeList+0x40>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4282      	cmp	r2, r0
 800176c:	d318      	bcc.n	80017a0 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800176e:	685c      	ldr	r4, [r3, #4]
 8001770:	1919      	adds	r1, r3, r4
 8001772:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001774:	bf01      	itttt	eq
 8001776:	6841      	ldreq	r1, [r0, #4]
 8001778:	4618      	moveq	r0, r3
 800177a:	1909      	addeq	r1, r1, r4
 800177c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800177e:	6844      	ldr	r4, [r0, #4]
 8001780:	1901      	adds	r1, r0, r4
 8001782:	428a      	cmp	r2, r1
 8001784:	d107      	bne.n	8001796 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001786:	4908      	ldr	r1, [pc, #32]	; (80017a8 <prvInsertBlockIntoFreeList+0x44>)
 8001788:	6809      	ldr	r1, [r1, #0]
 800178a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800178c:	bf1f      	itttt	ne
 800178e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001790:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001792:	1909      	addne	r1, r1, r4
 8001794:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001796:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001798:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800179a:	bf18      	it	ne
 800179c:	6018      	strne	r0, [r3, #0]
 800179e:	bd10      	pop	{r4, pc}
 80017a0:	4613      	mov	r3, r2
 80017a2:	e7e1      	b.n	8001768 <prvInsertBlockIntoFreeList+0x4>
 80017a4:	20003c44 	.word	0x20003c44
 80017a8:	20000034 	.word	0x20000034

080017ac <pvPortMalloc>:
{
 80017ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017b0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80017b2:	f000 fa25 	bl	8001c00 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80017b6:	493e      	ldr	r1, [pc, #248]	; (80018b0 <pvPortMalloc+0x104>)
 80017b8:	4d3e      	ldr	r5, [pc, #248]	; (80018b4 <pvPortMalloc+0x108>)
 80017ba:	680b      	ldr	r3, [r1, #0]
 80017bc:	bb0b      	cbnz	r3, 8001802 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80017be:	4a3e      	ldr	r2, [pc, #248]	; (80018b8 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80017c0:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80017c2:	bf1f      	itttt	ne
 80017c4:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80017c6:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80017ca:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 80017ce:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80017d0:	bf14      	ite	ne
 80017d2:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80017d4:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80017d8:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80017da:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80017dc:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80017e0:	4e36      	ldr	r6, [pc, #216]	; (80018bc <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80017e2:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80017e4:	2000      	movs	r0, #0
 80017e6:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80017e8:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80017ea:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80017ec:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80017ee:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80017f0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017f2:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80017f4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017f6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017f8:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <pvPortMalloc+0x118>)
 80017fa:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80017fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001800:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001802:	682f      	ldr	r7, [r5, #0]
 8001804:	4227      	tst	r7, r4
 8001806:	d116      	bne.n	8001836 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001808:	2c00      	cmp	r4, #0
 800180a:	d041      	beq.n	8001890 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 800180c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001810:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001812:	bf1c      	itt	ne
 8001814:	f023 0307 	bicne.w	r3, r3, #7
 8001818:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800181a:	b163      	cbz	r3, 8001836 <pvPortMalloc+0x8a>
 800181c:	4a29      	ldr	r2, [pc, #164]	; (80018c4 <pvPortMalloc+0x118>)
 800181e:	6816      	ldr	r6, [r2, #0]
 8001820:	42b3      	cmp	r3, r6
 8001822:	4690      	mov	r8, r2
 8001824:	d807      	bhi.n	8001836 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8001826:	4a25      	ldr	r2, [pc, #148]	; (80018bc <pvPortMalloc+0x110>)
 8001828:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800182a:	6868      	ldr	r0, [r5, #4]
 800182c:	4283      	cmp	r3, r0
 800182e:	d804      	bhi.n	800183a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001830:	6809      	ldr	r1, [r1, #0]
 8001832:	428d      	cmp	r5, r1
 8001834:	d107      	bne.n	8001846 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8001836:	2400      	movs	r4, #0
 8001838:	e02a      	b.n	8001890 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800183a:	682c      	ldr	r4, [r5, #0]
 800183c:	2c00      	cmp	r4, #0
 800183e:	d0f7      	beq.n	8001830 <pvPortMalloc+0x84>
 8001840:	462a      	mov	r2, r5
 8001842:	4625      	mov	r5, r4
 8001844:	e7f1      	b.n	800182a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001846:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001848:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800184a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800184c:	1ac2      	subs	r2, r0, r3
 800184e:	2a10      	cmp	r2, #16
 8001850:	d90f      	bls.n	8001872 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001852:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001854:	0741      	lsls	r1, r0, #29
 8001856:	d008      	beq.n	800186a <pvPortMalloc+0xbe>
 8001858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800185c:	f383 8811 	msr	BASEPRI, r3
 8001860:	f3bf 8f6f 	isb	sy
 8001864:	f3bf 8f4f 	dsb	sy
 8001868:	e7fe      	b.n	8001868 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800186a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800186c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800186e:	f7ff ff79 	bl	8001764 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001872:	4913      	ldr	r1, [pc, #76]	; (80018c0 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001874:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001876:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001878:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800187a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800187c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800187e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001882:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001886:	bf38      	it	cc
 8001888:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800188a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800188c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800188e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001890:	f000 fa50 	bl	8001d34 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001894:	0763      	lsls	r3, r4, #29
 8001896:	d008      	beq.n	80018aa <pvPortMalloc+0xfe>
 8001898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800189c:	f383 8811 	msr	BASEPRI, r3
 80018a0:	f3bf 8f6f 	isb	sy
 80018a4:	f3bf 8f4f 	dsb	sy
 80018a8:	e7fe      	b.n	80018a8 <pvPortMalloc+0xfc>
}
 80018aa:	4620      	mov	r0, r4
 80018ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018b0:	20000034 	.word	0x20000034
 80018b4:	20003c38 	.word	0x20003c38
 80018b8:	20000038 	.word	0x20000038
 80018bc:	20003c44 	.word	0x20003c44
 80018c0:	20003c40 	.word	0x20003c40
 80018c4:	20003c3c 	.word	0x20003c3c

080018c8 <vPortFree>:
{
 80018c8:	b510      	push	{r4, lr}
	if( pv != NULL )
 80018ca:	4604      	mov	r4, r0
 80018cc:	b370      	cbz	r0, 800192c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80018ce:	4a18      	ldr	r2, [pc, #96]	; (8001930 <vPortFree+0x68>)
 80018d0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	4213      	tst	r3, r2
 80018d8:	d108      	bne.n	80018ec <vPortFree+0x24>
 80018da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018de:	f383 8811 	msr	BASEPRI, r3
 80018e2:	f3bf 8f6f 	isb	sy
 80018e6:	f3bf 8f4f 	dsb	sy
 80018ea:	e7fe      	b.n	80018ea <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80018ec:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80018f0:	b141      	cbz	r1, 8001904 <vPortFree+0x3c>
 80018f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f6:	f383 8811 	msr	BASEPRI, r3
 80018fa:	f3bf 8f6f 	isb	sy
 80018fe:	f3bf 8f4f 	dsb	sy
 8001902:	e7fe      	b.n	8001902 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001904:	ea23 0302 	bic.w	r3, r3, r2
 8001908:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800190c:	f000 f978 	bl	8001c00 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001910:	4a08      	ldr	r2, [pc, #32]	; (8001934 <vPortFree+0x6c>)
 8001912:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001916:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001918:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800191c:	440b      	add	r3, r1
 800191e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001920:	f7ff ff20 	bl	8001764 <prvInsertBlockIntoFreeList>
}
 8001924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001928:	f000 ba04 	b.w	8001d34 <xTaskResumeAll>
 800192c:	bd10      	pop	{r4, pc}
 800192e:	bf00      	nop
 8001930:	20003c38 	.word	0x20003c38
 8001934:	20003c3c 	.word	0x20003c3c

08001938 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001938:	4a06      	ldr	r2, [pc, #24]	; (8001954 <prvResetNextTaskUnblockTime+0x1c>)
 800193a:	6813      	ldr	r3, [r2, #0]
 800193c:	6819      	ldr	r1, [r3, #0]
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <prvResetNextTaskUnblockTime+0x20>)
 8001940:	b919      	cbnz	r1, 800194a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001942:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800194e:	68d2      	ldr	r2, [r2, #12]
 8001950:	6852      	ldr	r2, [r2, #4]
 8001952:	e7f8      	b.n	8001946 <prvResetNextTaskUnblockTime+0xe>
 8001954:	20003c50 	.word	0x20003c50
 8001958:	20003d28 	.word	0x20003d28

0800195c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800195e:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001960:	4e1b      	ldr	r6, [pc, #108]	; (80019d0 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001962:	681d      	ldr	r5, [r3, #0]
{
 8001964:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001966:	6830      	ldr	r0, [r6, #0]
 8001968:	3004      	adds	r0, #4
{
 800196a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800196c:	f7ff fd84 	bl	8001478 <uxListRemove>
 8001970:	4633      	mov	r3, r6
 8001972:	b940      	cbnz	r0, 8001986 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001974:	6831      	ldr	r1, [r6, #0]
 8001976:	4e17      	ldr	r6, [pc, #92]	; (80019d4 <prvAddCurrentTaskToDelayedList+0x78>)
 8001978:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800197a:	6832      	ldr	r2, [r6, #0]
 800197c:	2001      	movs	r0, #1
 800197e:	4088      	lsls	r0, r1
 8001980:	ea22 0200 	bic.w	r2, r2, r0
 8001984:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001986:	1c62      	adds	r2, r4, #1
 8001988:	d107      	bne.n	800199a <prvAddCurrentTaskToDelayedList+0x3e>
 800198a:	b137      	cbz	r7, 800199a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800198c:	6819      	ldr	r1, [r3, #0]
 800198e:	4812      	ldr	r0, [pc, #72]	; (80019d8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001990:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001992:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001996:	f7ff bd4c 	b.w	8001432 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800199a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800199c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800199e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80019a0:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80019a2:	d907      	bls.n	80019b4 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80019a4:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <prvAddCurrentTaskToDelayedList+0x80>)
 80019a6:	6810      	ldr	r0, [r2, #0]
 80019a8:	6819      	ldr	r1, [r3, #0]
}
 80019aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80019ae:	3104      	adds	r1, #4
 80019b0:	f7ff bd4b 	b.w	800144a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80019b4:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <prvAddCurrentTaskToDelayedList+0x84>)
 80019b6:	6810      	ldr	r0, [r2, #0]
 80019b8:	6819      	ldr	r1, [r3, #0]
 80019ba:	3104      	adds	r1, #4
 80019bc:	f7ff fd45 	bl	800144a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <prvAddCurrentTaskToDelayedList+0x88>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80019c6:	bf38      	it	cc
 80019c8:	601c      	strcc	r4, [r3, #0]
 80019ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019cc:	20003d70 	.word	0x20003d70
 80019d0:	20003c4c 	.word	0x20003c4c
 80019d4:	20003cf8 	.word	0x20003cf8
 80019d8:	20003d48 	.word	0x20003d48
 80019dc:	20003c54 	.word	0x20003c54
 80019e0:	20003c50 	.word	0x20003c50
 80019e4:	20003d28 	.word	0x20003d28

080019e8 <xTaskCreate>:
	{
 80019e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019ec:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80019f0:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019f2:	4650      	mov	r0, sl
	{
 80019f4:	460f      	mov	r7, r1
 80019f6:	4699      	mov	r9, r3
 80019f8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019fa:	f7ff fed7 	bl	80017ac <pvPortMalloc>
			if( pxStack != NULL )
 80019fe:	4605      	mov	r5, r0
 8001a00:	2800      	cmp	r0, #0
 8001a02:	f000 8096 	beq.w	8001b32 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001a06:	2054      	movs	r0, #84	; 0x54
 8001a08:	f7ff fed0 	bl	80017ac <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001a0c:	4604      	mov	r4, r0
 8001a0e:	2800      	cmp	r0, #0
 8001a10:	f000 808c 	beq.w	8001b2c <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001a14:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8001a18:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001a1a:	4455      	add	r5, sl
 8001a1c:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001a1e:	f025 0a07 	bic.w	sl, r5, #7
 8001a22:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8001a26:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001a28:	7859      	ldrb	r1, [r3, #1]
 8001a2a:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001a2e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001a32:	b109      	cbz	r1, 8001a38 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a34:	42bb      	cmp	r3, r7
 8001a36:	d1f7      	bne.n	8001a28 <xTaskCreate+0x40>
 8001a38:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001a3a:	2d06      	cmp	r5, #6
 8001a3c:	bf28      	it	cs
 8001a3e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a40:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a44:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001a46:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001a48:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a4a:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a4c:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001a50:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a54:	f7ff fcea 	bl	800142c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a58:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001a5c:	f104 0018 	add.w	r0, r4, #24
 8001a60:	f7ff fce4 	bl	800142c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001a64:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a68:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a6a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a6c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001a6e:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a72:	464a      	mov	r2, r9
 8001a74:	4641      	mov	r1, r8
 8001a76:	4650      	mov	r0, sl
 8001a78:	f7ff fd40 	bl	80014fc <pxPortInitialiseStack>
 8001a7c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001a7e:	b106      	cbz	r6, 8001a82 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a80:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8001a82:	f7ff fd67 	bl	8001554 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001a86:	4b32      	ldr	r3, [pc, #200]	; (8001b50 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001a88:	4e32      	ldr	r6, [pc, #200]	; (8001b54 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001b80 <xTaskCreate+0x198>
 8001a90:	3201      	adds	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001a94:	6835      	ldr	r5, [r6, #0]
 8001a96:	2d00      	cmp	r5, #0
 8001a98:	d14e      	bne.n	8001b38 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8001a9a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d11d      	bne.n	8001ade <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001aa2:	eb08 0005 	add.w	r0, r8, r5
 8001aa6:	3514      	adds	r5, #20
 8001aa8:	f7ff fcb5 	bl	8001416 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001aac:	2d8c      	cmp	r5, #140	; 0x8c
 8001aae:	d1f8      	bne.n	8001aa2 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8001ab0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001b84 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8001ab4:	4d28      	ldr	r5, [pc, #160]	; (8001b58 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8001ab6:	4648      	mov	r0, r9
 8001ab8:	f7ff fcad 	bl	8001416 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001abc:	4628      	mov	r0, r5
 8001abe:	f7ff fcaa 	bl	8001416 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001ac2:	4826      	ldr	r0, [pc, #152]	; (8001b5c <xTaskCreate+0x174>)
 8001ac4:	f7ff fca7 	bl	8001416 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001ac8:	4825      	ldr	r0, [pc, #148]	; (8001b60 <xTaskCreate+0x178>)
 8001aca:	f7ff fca4 	bl	8001416 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001ace:	4825      	ldr	r0, [pc, #148]	; (8001b64 <xTaskCreate+0x17c>)
 8001ad0:	f7ff fca1 	bl	8001416 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <xTaskCreate+0x180>)
 8001ad6:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001ada:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <xTaskCreate+0x184>)
 8001adc:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001ade:	4a24      	ldr	r2, [pc, #144]	; (8001b70 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8001ae0:	4924      	ldr	r1, [pc, #144]	; (8001b74 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8001ae2:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001ae4:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001aea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001aec:	2501      	movs	r5, #1
 8001aee:	fa05 f302 	lsl.w	r3, r5, r2
 8001af2:	4303      	orrs	r3, r0
 8001af4:	2014      	movs	r0, #20
 8001af6:	600b      	str	r3, [r1, #0]
 8001af8:	fb00 8002 	mla	r0, r0, r2, r8
 8001afc:	4639      	mov	r1, r7
 8001afe:	f7ff fc98 	bl	8001432 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001b02:	f7ff fd49 	bl	8001598 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001b06:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <xTaskCreate+0x190>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	b163      	cbz	r3, 8001b26 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001b0c:	6833      	ldr	r3, [r6, #0]
 8001b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d207      	bcs.n	8001b26 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8001b16:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <xTaskCreate+0x194>)
 8001b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	f3bf 8f4f 	dsb	sy
 8001b22:	f3bf 8f6f 	isb	sy
	}
 8001b26:	4628      	mov	r0, r5
 8001b28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001b2c:	4628      	mov	r0, r5
 8001b2e:	f7ff fecb 	bl	80018c8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001b32:	f04f 35ff 	mov.w	r5, #4294967295
 8001b36:	e7f6      	b.n	8001b26 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <xTaskCreate+0x190>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1ce      	bne.n	8001ade <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001b40:	6833      	ldr	r3, [r6, #0]
 8001b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b46:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001b48:	bf98      	it	ls
 8001b4a:	6034      	strls	r4, [r6, #0]
 8001b4c:	e7c7      	b.n	8001ade <xTaskCreate+0xf6>
 8001b4e:	bf00      	nop
 8001b50:	20003ce4 	.word	0x20003ce4
 8001b54:	20003c4c 	.word	0x20003c4c
 8001b58:	20003d10 	.word	0x20003d10
 8001b5c:	20003d30 	.word	0x20003d30
 8001b60:	20003d5c 	.word	0x20003d5c
 8001b64:	20003d48 	.word	0x20003d48
 8001b68:	20003c50 	.word	0x20003c50
 8001b6c:	20003c54 	.word	0x20003c54
 8001b70:	20003cf4 	.word	0x20003cf4
 8001b74:	20003cf8 	.word	0x20003cf8
 8001b78:	20003d44 	.word	0x20003d44
 8001b7c:	e000ed04 	.word	0xe000ed04
 8001b80:	20003c58 	.word	0x20003c58
 8001b84:	20003cfc 	.word	0x20003cfc

08001b88 <vTaskStartScheduler>:
{
 8001b88:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001b8a:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <vTaskStartScheduler+0x60>)
 8001b8c:	9301      	str	r3, [sp, #4]
 8001b8e:	2400      	movs	r4, #0
 8001b90:	9400      	str	r4, [sp, #0]
 8001b92:	4623      	mov	r3, r4
 8001b94:	2280      	movs	r2, #128	; 0x80
 8001b96:	4915      	ldr	r1, [pc, #84]	; (8001bec <vTaskStartScheduler+0x64>)
 8001b98:	4815      	ldr	r0, [pc, #84]	; (8001bf0 <vTaskStartScheduler+0x68>)
 8001b9a:	f7ff ff25 	bl	80019e8 <xTaskCreate>
	if( xReturn == pdPASS )
 8001b9e:	2801      	cmp	r0, #1
 8001ba0:	d114      	bne.n	8001bcc <vTaskStartScheduler+0x44>
 8001ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba6:	f383 8811 	msr	BASEPRI, r3
 8001baa:	f3bf 8f6f 	isb	sy
 8001bae:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <vTaskStartScheduler+0x6c>)
 8001bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <vTaskStartScheduler+0x70>)
 8001bbc:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <vTaskStartScheduler+0x74>)
 8001bc0:	601c      	str	r4, [r3, #0]
}
 8001bc2:	b002      	add	sp, #8
 8001bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001bc8:	f7ff bd56 	b.w	8001678 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001bcc:	3001      	adds	r0, #1
 8001bce:	d108      	bne.n	8001be2 <vTaskStartScheduler+0x5a>
 8001bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bd4:	f383 8811 	msr	BASEPRI, r3
 8001bd8:	f3bf 8f6f 	isb	sy
 8001bdc:	f3bf 8f4f 	dsb	sy
 8001be0:	e7fe      	b.n	8001be0 <vTaskStartScheduler+0x58>
}
 8001be2:	b002      	add	sp, #8
 8001be4:	bd10      	pop	{r4, pc}
 8001be6:	bf00      	nop
 8001be8:	20003d24 	.word	0x20003d24
 8001bec:	08002a00 	.word	0x08002a00
 8001bf0:	08001e6d 	.word	0x08001e6d
 8001bf4:	20003d28 	.word	0x20003d28
 8001bf8:	20003d44 	.word	0x20003d44
 8001bfc:	20003d70 	.word	0x20003d70

08001c00 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001c00:	4a02      	ldr	r2, [pc, #8]	; (8001c0c <vTaskSuspendAll+0xc>)
 8001c02:	6813      	ldr	r3, [r2, #0]
 8001c04:	3301      	adds	r3, #1
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20003cf0 	.word	0x20003cf0

08001c10 <xTaskIncrementTick>:
{
 8001c10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c14:	4b3c      	ldr	r3, [pc, #240]	; (8001d08 <xTaskIncrementTick+0xf8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d153      	bne.n	8001cc4 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8001c1c:	4b3b      	ldr	r3, [pc, #236]	; (8001d0c <xTaskIncrementTick+0xfc>)
 8001c1e:	681c      	ldr	r4, [r3, #0]
 8001c20:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001c22:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8001c24:	b9bc      	cbnz	r4, 8001c56 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001c26:	4b3a      	ldr	r3, [pc, #232]	; (8001d10 <xTaskIncrementTick+0x100>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	b142      	cbz	r2, 8001c40 <xTaskIncrementTick+0x30>
 8001c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c32:	f383 8811 	msr	BASEPRI, r3
 8001c36:	f3bf 8f6f 	isb	sy
 8001c3a:	f3bf 8f4f 	dsb	sy
 8001c3e:	e7fe      	b.n	8001c3e <xTaskIncrementTick+0x2e>
 8001c40:	4a34      	ldr	r2, [pc, #208]	; (8001d14 <xTaskIncrementTick+0x104>)
 8001c42:	6819      	ldr	r1, [r3, #0]
 8001c44:	6810      	ldr	r0, [r2, #0]
 8001c46:	6018      	str	r0, [r3, #0]
 8001c48:	6011      	str	r1, [r2, #0]
 8001c4a:	4a33      	ldr	r2, [pc, #204]	; (8001d18 <xTaskIncrementTick+0x108>)
 8001c4c:	6813      	ldr	r3, [r2, #0]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	f7ff fe71 	bl	8001938 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001c56:	4d31      	ldr	r5, [pc, #196]	; (8001d1c <xTaskIncrementTick+0x10c>)
 8001c58:	4f31      	ldr	r7, [pc, #196]	; (8001d20 <xTaskIncrementTick+0x110>)
 8001c5a:	682b      	ldr	r3, [r5, #0]
 8001c5c:	429c      	cmp	r4, r3
 8001c5e:	f04f 0b00 	mov.w	fp, #0
 8001c62:	d33e      	bcc.n	8001ce2 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c64:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001d10 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001c68:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001d30 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c6c:	f8d8 2000 	ldr.w	r2, [r8]
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	bb72      	cbnz	r2, 8001cd2 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c74:	f04f 32ff 	mov.w	r2, #4294967295
 8001c78:	602a      	str	r2, [r5, #0]
					break;
 8001c7a:	e032      	b.n	8001ce2 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c7c:	f106 0a04 	add.w	sl, r6, #4
 8001c80:	4650      	mov	r0, sl
 8001c82:	f7ff fbf9 	bl	8001478 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001c86:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001c88:	b119      	cbz	r1, 8001c92 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c8a:	f106 0018 	add.w	r0, r6, #24
 8001c8e:	f7ff fbf3 	bl	8001478 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001c92:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001c94:	f8d9 3000 	ldr.w	r3, [r9]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	fa02 f100 	lsl.w	r1, r2, r0
 8001c9e:	4319      	orrs	r1, r3
 8001ca0:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <xTaskIncrementTick+0x114>)
 8001ca2:	f8c9 1000 	str.w	r1, [r9]
 8001ca6:	f04f 0e14 	mov.w	lr, #20
 8001caa:	4651      	mov	r1, sl
 8001cac:	fb0e 3000 	mla	r0, lr, r0, r3
 8001cb0:	f7ff fbbf 	bl	8001432 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001cb4:	6838      	ldr	r0, [r7, #0]
 8001cb6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001cb8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001cba:	4291      	cmp	r1, r2
 8001cbc:	bf28      	it	cs
 8001cbe:	f04f 0b01 	movcs.w	fp, #1
 8001cc2:	e7d3      	b.n	8001c6c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8001cc4:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <xTaskIncrementTick+0x118>)
 8001cc6:	6813      	ldr	r3, [r2, #0]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001ccc:	f04f 0b00 	mov.w	fp, #0
 8001cd0:	e011      	b.n	8001cf6 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001cd2:	f8d8 2000 	ldr.w	r2, [r8]
 8001cd6:	68d2      	ldr	r2, [r2, #12]
 8001cd8:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001cda:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001cdc:	428c      	cmp	r4, r1
 8001cde:	d2cd      	bcs.n	8001c7c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001ce0:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <xTaskIncrementTick+0x114>)
 8001ce6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ce8:	2214      	movs	r2, #20
 8001cea:	434a      	muls	r2, r1
 8001cec:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001cee:	2a02      	cmp	r2, #2
 8001cf0:	bf28      	it	cs
 8001cf2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8001cf6:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <xTaskIncrementTick+0x11c>)
 8001cf8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8001cfa:	2a00      	cmp	r2, #0
 8001cfc:	bf18      	it	ne
 8001cfe:	f04f 0b01 	movne.w	fp, #1
}
 8001d02:	4658      	mov	r0, fp
 8001d04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d08:	20003cf0 	.word	0x20003cf0
 8001d0c:	20003d70 	.word	0x20003d70
 8001d10:	20003c50 	.word	0x20003c50
 8001d14:	20003c54 	.word	0x20003c54
 8001d18:	20003d2c 	.word	0x20003d2c
 8001d1c:	20003d28 	.word	0x20003d28
 8001d20:	20003c4c 	.word	0x20003c4c
 8001d24:	20003c58 	.word	0x20003c58
 8001d28:	20003cec 	.word	0x20003cec
 8001d2c:	20003d74 	.word	0x20003d74
 8001d30:	20003cf8 	.word	0x20003cf8

08001d34 <xTaskResumeAll>:
{
 8001d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001d38:	4c31      	ldr	r4, [pc, #196]	; (8001e00 <xTaskResumeAll+0xcc>)
 8001d3a:	6823      	ldr	r3, [r4, #0]
 8001d3c:	b943      	cbnz	r3, 8001d50 <xTaskResumeAll+0x1c>
 8001d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d42:	f383 8811 	msr	BASEPRI, r3
 8001d46:	f3bf 8f6f 	isb	sy
 8001d4a:	f3bf 8f4f 	dsb	sy
 8001d4e:	e7fe      	b.n	8001d4e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001d50:	f7ff fc00 	bl	8001554 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d5a:	6824      	ldr	r4, [r4, #0]
 8001d5c:	b12c      	cbz	r4, 8001d6a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001d5e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001d60:	f7ff fc1a 	bl	8001598 <vPortExitCritical>
}
 8001d64:	4620      	mov	r0, r4
 8001d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001d6a:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <xTaskResumeAll+0xd0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f5      	beq.n	8001d5e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d72:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001e1c <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8001d76:	4f24      	ldr	r7, [pc, #144]	; (8001e08 <xTaskResumeAll+0xd4>)
 8001d78:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001e20 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d7c:	f8d9 3000 	ldr.w	r3, [r9]
 8001d80:	b9e3      	cbnz	r3, 8001dbc <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8001d82:	b10c      	cbz	r4, 8001d88 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8001d84:	f7ff fdd8 	bl	8001938 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001d88:	4d20      	ldr	r5, [pc, #128]	; (8001e0c <xTaskResumeAll+0xd8>)
 8001d8a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001d8c:	b144      	cbz	r4, 8001da0 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8001d8e:	4e20      	ldr	r6, [pc, #128]	; (8001e10 <xTaskResumeAll+0xdc>)
 8001d90:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8001d92:	f7ff ff3d 	bl	8001c10 <xTaskIncrementTick>
 8001d96:	b100      	cbz	r0, 8001d9a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001d98:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001d9a:	3c01      	subs	r4, #1
 8001d9c:	d1f9      	bne.n	8001d92 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8001d9e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001da0:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <xTaskResumeAll+0xdc>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0da      	beq.n	8001d5e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <xTaskResumeAll+0xe0>)
 8001daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	f3bf 8f4f 	dsb	sy
 8001db4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001db8:	2401      	movs	r4, #1
 8001dba:	e7d1      	b.n	8001d60 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001dbc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001dc0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001dc2:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001dc4:	f104 0018 	add.w	r0, r4, #24
 8001dc8:	f7ff fb56 	bl	8001478 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001dcc:	4630      	mov	r0, r6
 8001dce:	f7ff fb53 	bl	8001478 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001dd2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001dd4:	6839      	ldr	r1, [r7, #0]
 8001dd6:	2501      	movs	r5, #1
 8001dd8:	fa05 f302 	lsl.w	r3, r5, r2
 8001ddc:	2014      	movs	r0, #20
 8001dde:	430b      	orrs	r3, r1
 8001de0:	fb00 8002 	mla	r0, r0, r2, r8
 8001de4:	4631      	mov	r1, r6
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	f7ff fb23 	bl	8001432 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <xTaskResumeAll+0xe4>)
 8001dee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8001df6:	bf24      	itt	cs
 8001df8:	4b05      	ldrcs	r3, [pc, #20]	; (8001e10 <xTaskResumeAll+0xdc>)
 8001dfa:	601d      	strcs	r5, [r3, #0]
 8001dfc:	e7be      	b.n	8001d7c <xTaskResumeAll+0x48>
 8001dfe:	bf00      	nop
 8001e00:	20003cf0 	.word	0x20003cf0
 8001e04:	20003ce4 	.word	0x20003ce4
 8001e08:	20003cf8 	.word	0x20003cf8
 8001e0c:	20003cec 	.word	0x20003cec
 8001e10:	20003d74 	.word	0x20003d74
 8001e14:	e000ed04 	.word	0xe000ed04
 8001e18:	20003c4c 	.word	0x20003c4c
 8001e1c:	20003d30 	.word	0x20003d30
 8001e20:	20003c58 	.word	0x20003c58

08001e24 <vTaskDelay>:
	{
 8001e24:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001e26:	b940      	cbnz	r0, 8001e3a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001e28:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <vTaskDelay+0x40>)
 8001e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	f3bf 8f4f 	dsb	sy
 8001e34:	f3bf 8f6f 	isb	sy
 8001e38:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <vTaskDelay+0x44>)
 8001e3c:	6819      	ldr	r1, [r3, #0]
 8001e3e:	b141      	cbz	r1, 8001e52 <vTaskDelay+0x2e>
 8001e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e44:	f383 8811 	msr	BASEPRI, r3
 8001e48:	f3bf 8f6f 	isb	sy
 8001e4c:	f3bf 8f4f 	dsb	sy
 8001e50:	e7fe      	b.n	8001e50 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001e52:	f7ff fed5 	bl	8001c00 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001e56:	f7ff fd81 	bl	800195c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001e5a:	f7ff ff6b 	bl	8001d34 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001e5e:	2800      	cmp	r0, #0
 8001e60:	d0e2      	beq.n	8001e28 <vTaskDelay+0x4>
 8001e62:	bd08      	pop	{r3, pc}
 8001e64:	e000ed04 	.word	0xe000ed04
 8001e68:	20003cf0 	.word	0x20003cf0

08001e6c <prvIdleTask>:
{
 8001e6c:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001e6e:	4e17      	ldr	r6, [pc, #92]	; (8001ecc <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e70:	4c17      	ldr	r4, [pc, #92]	; (8001ed0 <prvIdleTask+0x64>)
 8001e72:	6823      	ldr	r3, [r4, #0]
 8001e74:	b963      	cbnz	r3, 8001e90 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <prvIdleTask+0x68>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d9f8      	bls.n	8001e70 <prvIdleTask+0x4>
				taskYIELD();
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <prvIdleTask+0x6c>)
 8001e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	f3bf 8f4f 	dsb	sy
 8001e8a:	f3bf 8f6f 	isb	sy
 8001e8e:	e7ef      	b.n	8001e70 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8001e90:	f7ff feb6 	bl	8001c00 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001e94:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8001e96:	f7ff ff4d 	bl	8001d34 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8001e9a:	2d00      	cmp	r5, #0
 8001e9c:	d0e9      	beq.n	8001e72 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8001e9e:	f7ff fb59 	bl	8001554 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001ea2:	68f3      	ldr	r3, [r6, #12]
 8001ea4:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ea6:	1d28      	adds	r0, r5, #4
 8001ea8:	f7ff fae6 	bl	8001478 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001eac:	4a0b      	ldr	r2, [pc, #44]	; (8001edc <prvIdleTask+0x70>)
 8001eae:	6813      	ldr	r3, [r2, #0]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8001eba:	f7ff fb6d 	bl	8001598 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8001ebe:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001ec0:	f7ff fd02 	bl	80018c8 <vPortFree>
			vPortFree( pxTCB );
 8001ec4:	4628      	mov	r0, r5
 8001ec6:	f7ff fcff 	bl	80018c8 <vPortFree>
 8001eca:	e7d2      	b.n	8001e72 <prvIdleTask+0x6>
 8001ecc:	20003d5c 	.word	0x20003d5c
 8001ed0:	20003ce8 	.word	0x20003ce8
 8001ed4:	20003c58 	.word	0x20003c58
 8001ed8:	e000ed04 	.word	0xe000ed04
 8001edc:	20003ce4 	.word	0x20003ce4

08001ee0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ee0:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <vTaskSwitchContext+0x60>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <vTaskSwitchContext+0x64>)
{
 8001ee6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ee8:	b112      	cbz	r2, 8001ef0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8001eea:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001ef0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <vTaskSwitchContext+0x68>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f1c3 031f 	rsb	r3, r3, #31
 8001f00:	2214      	movs	r2, #20
 8001f02:	4912      	ldr	r1, [pc, #72]	; (8001f4c <vTaskSwitchContext+0x6c>)
 8001f04:	435a      	muls	r2, r3
 8001f06:	1888      	adds	r0, r1, r2
 8001f08:	588c      	ldr	r4, [r1, r2]
 8001f0a:	b944      	cbnz	r4, 8001f1e <vTaskSwitchContext+0x3e>
	__asm volatile
 8001f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f10:	f383 8811 	msr	BASEPRI, r3
 8001f14:	f3bf 8f6f 	isb	sy
 8001f18:	f3bf 8f4f 	dsb	sy
 8001f1c:	e7fe      	b.n	8001f1c <vTaskSwitchContext+0x3c>
 8001f1e:	6844      	ldr	r4, [r0, #4]
 8001f20:	3208      	adds	r2, #8
 8001f22:	6864      	ldr	r4, [r4, #4]
 8001f24:	6044      	str	r4, [r0, #4]
 8001f26:	440a      	add	r2, r1
 8001f28:	4294      	cmp	r4, r2
 8001f2a:	bf04      	itt	eq
 8001f2c:	6862      	ldreq	r2, [r4, #4]
 8001f2e:	6042      	streq	r2, [r0, #4]
 8001f30:	2214      	movs	r2, #20
 8001f32:	fb02 1303 	mla	r3, r2, r3, r1
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <vTaskSwitchContext+0x70>)
 8001f3c:	e7d6      	b.n	8001eec <vTaskSwitchContext+0xc>
 8001f3e:	bf00      	nop
 8001f40:	20003cf0 	.word	0x20003cf0
 8001f44:	20003d74 	.word	0x20003d74
 8001f48:	20003cf8 	.word	0x20003cf8
 8001f4c:	20003c58 	.word	0x20003c58
 8001f50:	20003c4c 	.word	0x20003c4c

08001f54 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <xTaskGetSchedulerState+0x18>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	b133      	cbz	r3, 8001f68 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f5a:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <xTaskGetSchedulerState+0x1c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8001f60:	bf0c      	ite	eq
 8001f62:	2002      	moveq	r0, #2
 8001f64:	2000      	movne	r0, #0
 8001f66:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001f68:	2001      	movs	r0, #1
	}
 8001f6a:	4770      	bx	lr
 8001f6c:	20003d44 	.word	0x20003d44
 8001f70:	20003cf0 	.word	0x20003cf0

08001f74 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8001f74:	b508      	push	{r3, lr}

	osDelay(2000);
 8001f76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f7a:	f7ff fa3a 	bl	80013f2 <osDelay>

	HAL_GPIO_WritePin(M1_MAH_GPIO_Port, M1_MAH_Pin, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f84:	4813      	ldr	r0, [pc, #76]	; (8001fd4 <StartDefaultTask+0x60>)
 8001f86:	f7fe fc43 	bl	8000810 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1_MBH_GPIO_Port, M1_MBH_Pin, GPIO_PIN_SET);
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f90:	4811      	ldr	r0, [pc, #68]	; (8001fd8 <StartDefaultTask+0x64>)
 8001f92:	f7fe fc3d 	bl	8000810 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8001f96:	2108      	movs	r1, #8
 8001f98:	4810      	ldr	r0, [pc, #64]	; (8001fdc <StartDefaultTask+0x68>)
 8001f9a:	f7ff f9ab 	bl	80012f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8001f9e:	210c      	movs	r1, #12
 8001fa0:	480e      	ldr	r0, [pc, #56]	; (8001fdc <StartDefaultTask+0x68>)
 8001fa2:	f7ff f9a7 	bl	80012f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	480d      	ldr	r0, [pc, #52]	; (8001fe0 <StartDefaultTask+0x6c>)
 8001faa:	f7ff f9a3 	bl	80012f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001fae:	2104      	movs	r1, #4
 8001fb0:	480b      	ldr	r0, [pc, #44]	; (8001fe0 <StartDefaultTask+0x6c>)
 8001fb2:	f7ff f99f 	bl	80012f4 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001fb6:	2118      	movs	r1, #24
 8001fb8:	480a      	ldr	r0, [pc, #40]	; (8001fe4 <StartDefaultTask+0x70>)
 8001fba:	f7fe ffcb 	bl	8000f54 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001fbe:	2118      	movs	r1, #24
 8001fc0:	4809      	ldr	r0, [pc, #36]	; (8001fe8 <StartDefaultTask+0x74>)
 8001fc2:	f7fe ffc7 	bl	8000f54 <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start_IT(&htim1);
 8001fc6:	4806      	ldr	r0, [pc, #24]	; (8001fe0 <StartDefaultTask+0x6c>)
 8001fc8:	f7fe ffb8 	bl	8000f3c <HAL_TIM_Base_Start_IT>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001fcc:	2001      	movs	r0, #1
 8001fce:	f7ff fa10 	bl	80013f2 <osDelay>
 8001fd2:	e7fb      	b.n	8001fcc <StartDefaultTask+0x58>
 8001fd4:	40020000 	.word	0x40020000
 8001fd8:	40020800 	.word	0x40020800
 8001fdc:	20003e88 	.word	0x20003e88
 8001fe0:	20003ec4 	.word	0x20003ec4
 8001fe4:	20003f58 	.word	0x20003f58
 8001fe8:	20003dbc 	.word	0x20003dbc

08001fec <SystemClock_Config>:
{
 8001fec:	b530      	push	{r4, r5, lr}
 8001fee:	b095      	sub	sp, #84	; 0x54
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff0:	4b28      	ldr	r3, [pc, #160]	; (8002094 <SystemClock_Config+0xa8>)
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	9101      	str	r1, [sp, #4]
 8001ff6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ff8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002008:	4b23      	ldr	r3, [pc, #140]	; (8002098 <SystemClock_Config+0xac>)
 800200a:	9102      	str	r1, [sp, #8]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201a:	9302      	str	r3, [sp, #8]
 800201c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800201e:	2301      	movs	r3, #1
 8002020:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002026:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002028:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800202c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800202e:	2319      	movs	r3, #25
 8002030:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002032:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002036:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002038:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800203a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800203c:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800203e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002040:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002042:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002044:	f7fe fc58 	bl	80008f8 <HAL_RCC_OscConfig>
 8002048:	b100      	cbz	r0, 800204c <SystemClock_Config+0x60>
 800204a:	e7fe      	b.n	800204a <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800204c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002050:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002052:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002054:	250f      	movs	r5, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800205a:	2105      	movs	r1, #5
 800205c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800205e:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002060:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002062:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002064:	f7fe fdf8 	bl	8000c58 <HAL_RCC_ClockConfig>
 8002068:	4604      	mov	r4, r0
 800206a:	b100      	cbz	r0, 800206e <SystemClock_Config+0x82>
 800206c:	e7fe      	b.n	800206c <SystemClock_Config+0x80>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800206e:	f7fe fe8d 	bl	8000d8c <HAL_RCC_GetHCLKFreq>
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	fbb0 f0f3 	udiv	r0, r0, r3
 800207a:	f7fe fac7 	bl	800060c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800207e:	2004      	movs	r0, #4
 8002080:	f7fe fada 	bl	8000638 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002084:	4622      	mov	r2, r4
 8002086:	4629      	mov	r1, r5
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f7fe fa8a 	bl	80005a4 <HAL_NVIC_SetPriority>
}
 8002090:	b015      	add	sp, #84	; 0x54
 8002092:	bd30      	pop	{r4, r5, pc}
 8002094:	40023800 	.word	0x40023800
 8002098:	40007000 	.word	0x40007000

0800209c <main>:
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b098      	sub	sp, #96	; 0x60
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020a0:	2400      	movs	r4, #0
  HAL_Init();
 80020a2:	f7fe fa41 	bl	8000528 <HAL_Init>
  SystemClock_Config();
 80020a6:	f7ff ffa1 	bl	8001fec <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020aa:	4b9e      	ldr	r3, [pc, #632]	; (8002324 <main+0x288>)
 80020ac:	9400      	str	r4, [sp, #0]
 80020ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, M1_MBL_Pin|M0_MAL_Pin|M1_MAL_Pin, GPIO_PIN_RESET);
 80020b0:	489d      	ldr	r0, [pc, #628]	; (8002328 <main+0x28c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020b2:	f042 0210 	orr.w	r2, r2, #16
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
 80020b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ba:	f002 0210 	and.w	r2, r2, #16
 80020be:	9200      	str	r2, [sp, #0]
 80020c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020c6:	f042 0204 	orr.w	r2, r2, #4
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30
 80020cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ce:	f002 0204 	and.w	r2, r2, #4
 80020d2:	9201      	str	r2, [sp, #4]
 80020d4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020d6:	9402      	str	r4, [sp, #8]
 80020d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
 80020e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020e2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80020e6:	9202      	str	r2, [sp, #8]
 80020e8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ea:	9403      	str	r4, [sp, #12]
 80020ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
 80020f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f6:	f002 0201 	and.w	r2, r2, #1
 80020fa:	9203      	str	r2, [sp, #12]
 80020fc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fe:	9404      	str	r4, [sp, #16]
 8002100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002102:	f042 0202 	orr.w	r2, r2, #2
 8002106:	631a      	str	r2, [r3, #48]	; 0x30
 8002108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800210a:	f002 0202 	and.w	r2, r2, #2
 800210e:	9204      	str	r2, [sp, #16]
 8002110:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002112:	9405      	str	r4, [sp, #20]
 8002114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002116:	f042 0208 	orr.w	r2, r2, #8
 800211a:	631a      	str	r2, [r3, #48]	; 0x30
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOE, M1_MBL_Pin|M0_MAL_Pin|M1_MAL_Pin, GPIO_PIN_RESET);
 8002124:	4622      	mov	r2, r4
 8002126:	2170      	movs	r1, #112	; 0x70
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002128:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOE, M1_MBL_Pin|M0_MAL_Pin|M1_MAL_Pin, GPIO_PIN_RESET);
 800212a:	f7fe fb71 	bl	8000810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, M0_MBL_Pin|M2_MAL_Pin, GPIO_PIN_RESET);
 800212e:	4622      	mov	r2, r4
 8002130:	f242 0104 	movw	r1, #8196	; 0x2004
 8002134:	487d      	ldr	r0, [pc, #500]	; (800232c <main+0x290>)
 8002136:	f7fe fb6b 	bl	8000810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, NRF_CE_Pin|NRF_CS__Pin, GPIO_PIN_RESET);
 800213a:	4622      	mov	r2, r4
 800213c:	2118      	movs	r1, #24
 800213e:	487c      	ldr	r0, [pc, #496]	; (8002330 <main+0x294>)
 8002140:	f7fe fb66 	bl	8000810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, M2_MBL_Pin|M3_MBL_Pin|M3_MAL_Pin, GPIO_PIN_RESET);
 8002144:	4622      	mov	r2, r4
 8002146:	f641 0102 	movw	r1, #6146	; 0x1802
 800214a:	487a      	ldr	r0, [pc, #488]	; (8002334 <main+0x298>)
 800214c:	f7fe fb60 	bl	8000810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, CA_Pin|CB_Pin|LED_GREEN_Pin|LED_ORANGE_Pin 
 8002150:	4622      	mov	r2, r4
 8002152:	f44f 4175 	mov.w	r1, #62720	; 0xf500
 8002156:	4878      	ldr	r0, [pc, #480]	; (8002338 <main+0x29c>)
 8002158:	f7fe fb5a 	bl	8000810 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SW1_Pin;
 800215c:	2604      	movs	r6, #4
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 800215e:	a90f      	add	r1, sp, #60	; 0x3c
 8002160:	4871      	ldr	r0, [pc, #452]	; (8002328 <main+0x28c>)
  GPIO_InitStruct.Pin = SW1_Pin;
 8002162:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002164:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002166:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 800216a:	f7fe fa71 	bl	8000650 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_MBL_Pin|M0_MAL_Pin|M1_MAL_Pin;
 800216e:	2370      	movs	r3, #112	; 0x70
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002170:	a90f      	add	r1, sp, #60	; 0x3c
 8002172:	486d      	ldr	r0, [pc, #436]	; (8002328 <main+0x28c>)
  GPIO_InitStruct.Pin = M1_MBL_Pin|M0_MAL_Pin|M1_MAL_Pin;
 8002174:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002176:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800217c:	f7fe fa68 	bl	8000650 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M0_MBL_Pin|M2_MAL_Pin;
 8002180:	f242 0304 	movw	r3, #8196	; 0x2004
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002184:	a90f      	add	r1, sp, #60	; 0x3c
 8002186:	4869      	ldr	r0, [pc, #420]	; (800232c <main+0x290>)
  GPIO_InitStruct.Pin = M0_MBL_Pin|M2_MAL_Pin;
 8002188:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800218a:	2703      	movs	r7, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218c:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002192:	f7fe fa5d 	bl	8000650 <HAL_GPIO_Init>
  HAL_GPIO_Init(BAT_REF_GPIO_Port, &GPIO_InitStruct);
 8002196:	a90f      	add	r1, sp, #60	; 0x3c
 8002198:	4864      	ldr	r0, [pc, #400]	; (800232c <main+0x290>)
  GPIO_InitStruct.Pin = BAT_REF_Pin;
 800219a:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800219c:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(BAT_REF_GPIO_Port, &GPIO_InitStruct);
 80021a0:	f7fe fa56 	bl	8000650 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = S1_Pin|NRF_IRQ_Pin;
 80021a4:	2322      	movs	r3, #34	; 0x22
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a6:	a90f      	add	r1, sp, #60	; 0x3c
 80021a8:	4860      	ldr	r0, [pc, #384]	; (800232c <main+0x290>)
  GPIO_InitStruct.Pin = S1_Pin|NRF_IRQ_Pin;
 80021aa:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ac:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b0:	f7fe fa4e 	bl	8000650 <HAL_GPIO_Init>
  HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 80021b4:	a90f      	add	r1, sp, #60	; 0x3c
 80021b6:	485e      	ldr	r0, [pc, #376]	; (8002330 <main+0x294>)
  GPIO_InitStruct.Pin = S2_Pin;
 80021b8:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ba:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CS__Pin;
 80021be:	f04f 0818 	mov.w	r8, #24
  HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 80021c2:	f7fe fa45 	bl	8000650 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	a90f      	add	r1, sp, #60	; 0x3c
 80021c8:	4859      	ldr	r0, [pc, #356]	; (8002330 <main+0x294>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ca:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CS__Pin;
 80021cc:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d4:	f7fe fa3c 	bl	8000650 <HAL_GPIO_Init>
  HAL_GPIO_Init(CT_GPIO_Port, &GPIO_InitStruct);
 80021d8:	a90f      	add	r1, sp, #60	; 0x3c
 80021da:	4856      	ldr	r0, [pc, #344]	; (8002334 <main+0x298>)
  GPIO_InitStruct.Pin = CT_Pin;
 80021dc:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021de:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(CT_GPIO_Port, &GPIO_InitStruct);
 80021e2:	f7fe fa35 	bl	8000650 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M2_MBL_Pin|M3_MBL_Pin|M3_MAL_Pin;
 80021e6:	f641 0302 	movw	r3, #6146	; 0x1802
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ea:	a90f      	add	r1, sp, #60	; 0x3c
 80021ec:	4851      	ldr	r0, [pc, #324]	; (8002334 <main+0x298>)
  GPIO_InitStruct.Pin = M2_MBL_Pin|M3_MBL_Pin|M3_MAL_Pin;
 80021ee:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f0:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f4:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f6:	f7fe fa2b 	bl	8000650 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CA_Pin|CB_Pin|LED_GREEN_Pin|LED_ORANGE_Pin 
 80021fa:	f44f 4375 	mov.w	r3, #62720	; 0xf500
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021fe:	a90f      	add	r1, sp, #60	; 0x3c
 8002200:	484d      	ldr	r0, [pc, #308]	; (8002338 <main+0x29c>)
  GPIO_InitStruct.Pin = CA_Pin|CB_Pin|LED_GREEN_Pin|LED_ORANGE_Pin 
 8002202:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002204:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800220a:	f44f 7900 	mov.w	r9, #512	; 0x200
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800220e:	f7fe fa1f 	bl	8000650 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	a90f      	add	r1, sp, #60	; 0x3c
 8002214:	4846      	ldr	r0, [pc, #280]	; (8002330 <main+0x294>)
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002216:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800221e:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002222:	250a      	movs	r5, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002224:	f7fe fa14 	bl	8000650 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002228:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222c:	a90f      	add	r1, sp, #60	; 0x3c
 800222e:	4840      	ldr	r0, [pc, #256]	; (8002330 <main+0x294>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002230:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002238:	9712      	str	r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800223a:	9513      	str	r5, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223c:	f7fe fa08 	bl	8000650 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Reset_Pin|USB_overcurrent_Pin;
 8002240:	2330      	movs	r3, #48	; 0x30
 8002242:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002244:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 8002246:	230f      	movs	r3, #15
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002248:	483b      	ldr	r0, [pc, #236]	; (8002338 <main+0x29c>)
  GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 800224a:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002252:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002254:	f7fe f9fc 	bl	8000650 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW3_Pin|SW2_Pin;
 8002258:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800225a:	4837      	ldr	r0, [pc, #220]	; (8002338 <main+0x29c>)
  GPIO_InitStruct.Pin = SW3_Pin|SW2_Pin;
 800225c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800225e:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002260:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002264:	f7fe f9f4 	bl	8000650 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8002268:	4834      	ldr	r0, [pc, #208]	; (800233c <main+0x2a0>)
  hi2c1.Init.ClockSpeed = 100000;
 800226a:	4b35      	ldr	r3, [pc, #212]	; (8002340 <main+0x2a4>)
 800226c:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 8002354 <main+0x2b8>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002270:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8002272:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.OwnAddress1 = 130;
 8002276:	2382      	movs	r3, #130	; 0x82
 8002278:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800227a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800227e:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002280:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002282:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002284:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002286:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002288:	f7fe fac8 	bl	800081c <HAL_I2C_Init>
 800228c:	b100      	cbz	r0, 8002290 <main+0x1f4>
 800228e:	e7fe      	b.n	800228e <main+0x1f2>
  hspi1.Instance = SPI1;
 8002290:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <main+0x2a8>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002292:	4a2d      	ldr	r2, [pc, #180]	; (8002348 <main+0x2ac>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002294:	6098      	str	r0, [r3, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002296:	f44f 7782 	mov.w	r7, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800229a:	60d8      	str	r0, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800229c:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800229e:	6158      	str	r0, [r3, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022a0:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022a2:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022a4:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022a6:	4618      	mov	r0, r3
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022a8:	e883 0084 	stmia.w	r3, {r2, r7}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022ac:	f8c3 9018 	str.w	r9, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80022b0:	f8c3 801c 	str.w	r8, [r3, #28]
  hspi1.Init.CRCPolynomial = 10;
 80022b4:	62dd      	str	r5, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022b6:	f7fe fd7f 	bl	8000db8 <HAL_SPI_Init>
 80022ba:	b100      	cbz	r0, 80022be <main+0x222>
 80022bc:	e7fe      	b.n	80022bc <main+0x220>
  htim1.Instance = TIM1;
 80022be:	4c23      	ldr	r4, [pc, #140]	; (800234c <main+0x2b0>)
  htim1.Init.Prescaler = 167;
 80022c0:	4b23      	ldr	r3, [pc, #140]	; (8002350 <main+0x2b4>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c2:	60a0      	str	r0, [r4, #8]
  htim1.Init.Prescaler = 167;
 80022c4:	25a7      	movs	r5, #167	; 0xa7
 80022c6:	e884 0028 	stmia.w	r4, {r3, r5}
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ca:	6120      	str	r0, [r4, #16]
  htim1.Init.Period = 999;
 80022cc:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim1.Init.RepetitionCounter = 0;
 80022d0:	6160      	str	r0, [r4, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022d2:	4620      	mov	r0, r4
  htim1.Init.Period = 999;
 80022d4:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022d6:	f7fe fedd 	bl	8001094 <HAL_TIM_PWM_Init>
 80022da:	b100      	cbz	r0, 80022de <main+0x242>
 80022dc:	e7fe      	b.n	80022dc <main+0x240>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80022de:	4620      	mov	r0, r4
 80022e0:	f7fe febe 	bl	8001060 <HAL_TIM_OC_Init>
 80022e4:	b100      	cbz	r0, 80022e8 <main+0x24c>
 80022e6:	e7fe      	b.n	80022e6 <main+0x24a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e8:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ea:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022ec:	a906      	add	r1, sp, #24
 80022ee:	4620      	mov	r0, r4
 80022f0:	f7ff f81a 	bl	8001328 <HAL_TIMEx_MasterConfigSynchronization>
 80022f4:	4602      	mov	r2, r0
 80022f6:	b100      	cbz	r0, 80022fa <main+0x25e>
 80022f8:	e7fe      	b.n	80022f8 <main+0x25c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022fa:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80022fc:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022fe:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002300:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002302:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002304:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002306:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002308:	a908      	add	r1, sp, #32
 800230a:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800230c:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800230e:	f7fe ff83 	bl	8001218 <HAL_TIM_PWM_ConfigChannel>
 8002312:	b100      	cbz	r0, 8002316 <main+0x27a>
 8002314:	e7fe      	b.n	8002314 <main+0x278>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002316:	4632      	mov	r2, r6
 8002318:	a908      	add	r1, sp, #32
 800231a:	4620      	mov	r0, r4
 800231c:	f7fe ff7c 	bl	8001218 <HAL_TIM_PWM_ConfigChannel>
 8002320:	b1d0      	cbz	r0, 8002358 <main+0x2bc>
 8002322:	e7fe      	b.n	8002322 <main+0x286>
 8002324:	40023800 	.word	0x40023800
 8002328:	40021000 	.word	0x40021000
 800232c:	40020800 	.word	0x40020800
 8002330:	40020000 	.word	0x40020000
 8002334:	40020400 	.word	0x40020400
 8002338:	40020c00 	.word	0x40020c00
 800233c:	20003df8 	.word	0x20003df8
 8002340:	40005400 	.word	0x40005400
 8002344:	20003f00 	.word	0x20003f00
 8002348:	40013000 	.word	0x40013000
 800234c:	20003ec4 	.word	0x20003ec4
 8002350:	40010000 	.word	0x40010000
 8002354:	000186a0 	.word	0x000186a0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002358:	2208      	movs	r2, #8
 800235a:	a908      	add	r1, sp, #32
 800235c:	4620      	mov	r0, r4
 800235e:	f7fe ff5b 	bl	8001218 <HAL_TIM_PWM_ConfigChannel>
 8002362:	b100      	cbz	r0, 8002366 <main+0x2ca>
 8002364:	e7fe      	b.n	8002364 <main+0x2c8>
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002366:	220c      	movs	r2, #12
 8002368:	a908      	add	r1, sp, #32
 800236a:	4620      	mov	r0, r4
 800236c:	f7fe ff26 	bl	80011bc <HAL_TIM_OC_ConfigChannel>
 8002370:	b100      	cbz	r0, 8002374 <main+0x2d8>
 8002372:	e7fe      	b.n	8002372 <main+0x2d6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002374:	900f      	str	r0, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002376:	9010      	str	r0, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002378:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 800237a:	9012      	str	r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800237c:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800237e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002382:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002384:	a90f      	add	r1, sp, #60	; 0x3c
 8002386:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002388:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800238a:	f7fe ffef 	bl	800136c <HAL_TIMEx_ConfigBreakDeadTime>
 800238e:	b100      	cbz	r0, 8002392 <main+0x2f6>
 8002390:	e7fe      	b.n	8002390 <main+0x2f4>
  htim2.Instance = TIM2;
 8002392:	4d7d      	ldr	r5, [pc, #500]	; (8002588 <main+0x4ec>)
  HAL_TIM_MspPostInit(&htim1);
 8002394:	487d      	ldr	r0, [pc, #500]	; (800258c <main+0x4f0>)
 8002396:	f000 fa4b 	bl	8002830 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 800239a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Period = 0xffff;
 800239e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023a2:	2401      	movs	r4, #1
  htim2.Instance = TIM2;
 80023a4:	602b      	str	r3, [r5, #0]
  htim2.Init.Period = 0xffff;
 80023a6:	60ea      	str	r2, [r5, #12]
  htim2.Init.Prescaler = 0;
 80023a8:	2300      	movs	r3, #0
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023aa:	2203      	movs	r2, #3
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80023ac:	a90f      	add	r1, sp, #60	; 0x3c
 80023ae:	4628      	mov	r0, r5
  htim2.Init.Prescaler = 0;
 80023b0:	606b      	str	r3, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b2:	60ab      	str	r3, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b4:	612b      	str	r3, [r5, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023b6:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023b8:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023ba:	9411      	str	r4, [sp, #68]	; 0x44
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023bc:	9312      	str	r3, [sp, #72]	; 0x48
  sConfig.IC1Filter = 0;
 80023be:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023c0:	9314      	str	r3, [sp, #80]	; 0x50
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023c2:	9415      	str	r4, [sp, #84]	; 0x54
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023c4:	9316      	str	r3, [sp, #88]	; 0x58
  sConfig.IC2Filter = 0;
 80023c6:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80023c8:	f7fe fe7e 	bl	80010c8 <HAL_TIM_Encoder_Init>
 80023cc:	b100      	cbz	r0, 80023d0 <main+0x334>
 80023ce:	e7fe      	b.n	80023ce <main+0x332>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d0:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d2:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023d4:	a908      	add	r1, sp, #32
 80023d6:	4628      	mov	r0, r5
 80023d8:	f7fe ffa6 	bl	8001328 <HAL_TIMEx_MasterConfigSynchronization>
 80023dc:	b100      	cbz	r0, 80023e0 <main+0x344>
 80023de:	e7fe      	b.n	80023de <main+0x342>
  htim3.Instance = TIM3;
 80023e0:	4d6b      	ldr	r5, [pc, #428]	; (8002590 <main+0x4f4>)
 80023e2:	4b6c      	ldr	r3, [pc, #432]	; (8002594 <main+0x4f8>)
  htim3.Init.Prescaler = 0;
 80023e4:	6068      	str	r0, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e6:	60a8      	str	r0, [r5, #8]
  htim3.Init.Period = 0;
 80023e8:	60e8      	str	r0, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ea:	6128      	str	r0, [r5, #16]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023ec:	9010      	str	r0, [sp, #64]	; 0x40
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023ee:	9012      	str	r0, [sp, #72]	; 0x48
  sConfig.IC1Filter = 0;
 80023f0:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023f2:	9014      	str	r0, [sp, #80]	; 0x50
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023f4:	9016      	str	r0, [sp, #88]	; 0x58
  sConfig.IC2Filter = 0;
 80023f6:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80023f8:	a90f      	add	r1, sp, #60	; 0x3c
 80023fa:	4628      	mov	r0, r5
  htim3.Instance = TIM3;
 80023fc:	602b      	str	r3, [r5, #0]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80023fe:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002400:	9411      	str	r4, [sp, #68]	; 0x44
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002402:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002404:	f7fe fe60 	bl	80010c8 <HAL_TIM_Encoder_Init>
 8002408:	b100      	cbz	r0, 800240c <main+0x370>
 800240a:	e7fe      	b.n	800240a <main+0x36e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800240c:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800240e:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002410:	a908      	add	r1, sp, #32
 8002412:	4628      	mov	r0, r5
 8002414:	f7fe ff88 	bl	8001328 <HAL_TIMEx_MasterConfigSynchronization>
 8002418:	b100      	cbz	r0, 800241c <main+0x380>
 800241a:	e7fe      	b.n	800241a <main+0x37e>
  htim4.Instance = TIM4;
 800241c:	4d5e      	ldr	r5, [pc, #376]	; (8002598 <main+0x4fc>)
 800241e:	4b5f      	ldr	r3, [pc, #380]	; (800259c <main+0x500>)
  htim4.Init.Prescaler = 0;
 8002420:	6068      	str	r0, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002422:	60a8      	str	r0, [r5, #8]
  htim4.Init.Period = 0;
 8002424:	60e8      	str	r0, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002426:	6128      	str	r0, [r5, #16]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002428:	9010      	str	r0, [sp, #64]	; 0x40
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800242a:	9012      	str	r0, [sp, #72]	; 0x48
  sConfig.IC1Filter = 0;
 800242c:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800242e:	9014      	str	r0, [sp, #80]	; 0x50
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002430:	9016      	str	r0, [sp, #88]	; 0x58
  sConfig.IC2Filter = 0;
 8002432:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002434:	a90f      	add	r1, sp, #60	; 0x3c
 8002436:	4628      	mov	r0, r5
  htim4.Instance = TIM4;
 8002438:	602b      	str	r3, [r5, #0]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800243a:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800243c:	9411      	str	r4, [sp, #68]	; 0x44
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800243e:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002440:	f7fe fe42 	bl	80010c8 <HAL_TIM_Encoder_Init>
 8002444:	b100      	cbz	r0, 8002448 <main+0x3ac>
 8002446:	e7fe      	b.n	8002446 <main+0x3aa>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002448:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800244a:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800244c:	a908      	add	r1, sp, #32
 800244e:	4628      	mov	r0, r5
 8002450:	f7fe ff6a 	bl	8001328 <HAL_TIMEx_MasterConfigSynchronization>
 8002454:	b100      	cbz	r0, 8002458 <main+0x3bc>
 8002456:	e7fe      	b.n	8002456 <main+0x3ba>
  htim5.Instance = TIM5;
 8002458:	4d51      	ldr	r5, [pc, #324]	; (80025a0 <main+0x504>)
 800245a:	4b52      	ldr	r3, [pc, #328]	; (80025a4 <main+0x508>)
  htim5.Init.Prescaler = 0;
 800245c:	6068      	str	r0, [r5, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245e:	60a8      	str	r0, [r5, #8]
  htim5.Init.Period = 0;
 8002460:	60e8      	str	r0, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002462:	6128      	str	r0, [r5, #16]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002464:	9010      	str	r0, [sp, #64]	; 0x40
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002466:	9012      	str	r0, [sp, #72]	; 0x48
  sConfig.IC1Filter = 0;
 8002468:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800246a:	9014      	str	r0, [sp, #80]	; 0x50
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800246c:	9016      	str	r0, [sp, #88]	; 0x58
  sConfig.IC2Filter = 0;
 800246e:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002470:	a90f      	add	r1, sp, #60	; 0x3c
 8002472:	4628      	mov	r0, r5
  htim5.Instance = TIM5;
 8002474:	602b      	str	r3, [r5, #0]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002476:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002478:	9411      	str	r4, [sp, #68]	; 0x44
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800247a:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800247c:	f7fe fe24 	bl	80010c8 <HAL_TIM_Encoder_Init>
 8002480:	b100      	cbz	r0, 8002484 <main+0x3e8>
 8002482:	e7fe      	b.n	8002482 <main+0x3e6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002484:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002486:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002488:	a908      	add	r1, sp, #32
 800248a:	4628      	mov	r0, r5
 800248c:	f7fe ff4c 	bl	8001328 <HAL_TIMEx_MasterConfigSynchronization>
 8002490:	b100      	cbz	r0, 8002494 <main+0x3f8>
 8002492:	e7fe      	b.n	8002492 <main+0x3f6>
  htim8.Instance = TIM8;
 8002494:	4c44      	ldr	r4, [pc, #272]	; (80025a8 <main+0x50c>)
  htim8.Init.Prescaler = 167;
 8002496:	4a45      	ldr	r2, [pc, #276]	; (80025ac <main+0x510>)
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002498:	60a0      	str	r0, [r4, #8]
  htim8.Init.Prescaler = 167;
 800249a:	23a7      	movs	r3, #167	; 0xa7
 800249c:	e884 000c 	stmia.w	r4, {r2, r3}
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024a0:	6120      	str	r0, [r4, #16]
  htim8.Init.Period = 999;
 80024a2:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim8.Init.RepetitionCounter = 0;
 80024a6:	6160      	str	r0, [r4, #20]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80024a8:	4620      	mov	r0, r4
  htim8.Init.Period = 999;
 80024aa:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80024ac:	f7fe fdf2 	bl	8001094 <HAL_TIM_PWM_Init>
 80024b0:	b100      	cbz	r0, 80024b4 <main+0x418>
 80024b2:	e7fe      	b.n	80024b2 <main+0x416>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b4:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b6:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80024b8:	a906      	add	r1, sp, #24
 80024ba:	4620      	mov	r0, r4
 80024bc:	f7fe ff34 	bl	8001328 <HAL_TIMEx_MasterConfigSynchronization>
 80024c0:	b100      	cbz	r0, 80024c4 <main+0x428>
 80024c2:	e7fe      	b.n	80024c2 <main+0x426>
  sConfigOC.Pulse = 0;
 80024c4:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024c6:	2660      	movs	r6, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024c8:	a908      	add	r1, sp, #32
 80024ca:	4837      	ldr	r0, [pc, #220]	; (80025a8 <main+0x50c>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024cc:	9608      	str	r6, [sp, #32]
  sConfigOC.Pulse = 0;
 80024ce:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024d0:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024d2:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024d4:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024d6:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024d8:	920e      	str	r2, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024da:	f7fe fe9d 	bl	8001218 <HAL_TIM_PWM_ConfigChannel>
 80024de:	b100      	cbz	r0, 80024e2 <main+0x446>
 80024e0:	e7fe      	b.n	80024e0 <main+0x444>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024e2:	2204      	movs	r2, #4
 80024e4:	a908      	add	r1, sp, #32
 80024e6:	4830      	ldr	r0, [pc, #192]	; (80025a8 <main+0x50c>)
 80024e8:	f7fe fe96 	bl	8001218 <HAL_TIM_PWM_ConfigChannel>
 80024ec:	b100      	cbz	r0, 80024f0 <main+0x454>
 80024ee:	e7fe      	b.n	80024ee <main+0x452>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024f0:	2208      	movs	r2, #8
 80024f2:	a908      	add	r1, sp, #32
 80024f4:	482c      	ldr	r0, [pc, #176]	; (80025a8 <main+0x50c>)
 80024f6:	f7fe fe8f 	bl	8001218 <HAL_TIM_PWM_ConfigChannel>
 80024fa:	b100      	cbz	r0, 80024fe <main+0x462>
 80024fc:	e7fe      	b.n	80024fc <main+0x460>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024fe:	220c      	movs	r2, #12
 8002500:	a908      	add	r1, sp, #32
 8002502:	4829      	ldr	r0, [pc, #164]	; (80025a8 <main+0x50c>)
 8002504:	f7fe fe88 	bl	8001218 <HAL_TIM_PWM_ConfigChannel>
 8002508:	b100      	cbz	r0, 800250c <main+0x470>
 800250a:	e7fe      	b.n	800250a <main+0x46e>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800250c:	900f      	str	r0, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800250e:	9010      	str	r0, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002510:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 8002512:	9012      	str	r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002514:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800251a:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800251c:	a90f      	add	r1, sp, #60	; 0x3c
 800251e:	4822      	ldr	r0, [pc, #136]	; (80025a8 <main+0x50c>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002520:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002522:	f7fe ff23 	bl	800136c <HAL_TIMEx_ConfigBreakDeadTime>
 8002526:	4605      	mov	r5, r0
 8002528:	b100      	cbz	r0, 800252c <main+0x490>
 800252a:	e7fe      	b.n	800252a <main+0x48e>
  htim12.Instance = TIM12;
 800252c:	4c20      	ldr	r4, [pc, #128]	; (80025b0 <main+0x514>)
  HAL_TIM_MspPostInit(&htim8);
 800252e:	481e      	ldr	r0, [pc, #120]	; (80025a8 <main+0x50c>)
 8002530:	f000 f97e 	bl	8002830 <HAL_TIM_MspPostInit>
  htim12.Instance = TIM12;
 8002534:	4b1f      	ldr	r3, [pc, #124]	; (80025b4 <main+0x518>)
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002536:	60a5      	str	r5, [r4, #8]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002538:	4620      	mov	r0, r4
  htim12.Init.Prescaler = 0;
 800253a:	e884 0028 	stmia.w	r4, {r3, r5}
  htim12.Init.Period = 0;
 800253e:	60e5      	str	r5, [r4, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002540:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002542:	f7fe fda7 	bl	8001094 <HAL_TIM_PWM_Init>
 8002546:	b100      	cbz	r0, 800254a <main+0x4ae>
 8002548:	e7fe      	b.n	8002548 <main+0x4ac>
  sConfigOC.Pulse = 0;
 800254a:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800254c:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800254e:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002550:	2204      	movs	r2, #4
 8002552:	a90f      	add	r1, sp, #60	; 0x3c
 8002554:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002556:	960f      	str	r6, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002558:	f7fe fe5e 	bl	8001218 <HAL_TIM_PWM_ConfigChannel>
 800255c:	4606      	mov	r6, r0
 800255e:	b100      	cbz	r0, 8002562 <main+0x4c6>
 8002560:	e7fe      	b.n	8002560 <main+0x4c4>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002562:	4d15      	ldr	r5, [pc, #84]	; (80025b8 <main+0x51c>)
  HAL_TIM_MspPostInit(&htim12);
 8002564:	4620      	mov	r0, r4
 8002566:	f000 f963 	bl	8002830 <HAL_TIM_MspPostInit>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800256a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800256c:	ac0f      	add	r4, sp, #60	; 0x3c
 800256e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002570:	682b      	ldr	r3, [r5, #0]
 8002572:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002574:	4631      	mov	r1, r6
 8002576:	a80f      	add	r0, sp, #60	; 0x3c
 8002578:	f7fe ff23 	bl	80013c2 <osThreadCreate>
 800257c:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <main+0x520>)
 800257e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002580:	f7fe ff1a 	bl	80013b8 <osKernelStart>
 8002584:	e7fe      	b.n	8002584 <main+0x4e8>
 8002586:	bf00      	nop
 8002588:	20003f58 	.word	0x20003f58
 800258c:	20003ec4 	.word	0x20003ec4
 8002590:	20003e88 	.word	0x20003e88
 8002594:	40000400 	.word	0x40000400
 8002598:	20003dbc 	.word	0x20003dbc
 800259c:	40000800 	.word	0x40000800
 80025a0:	20003e4c 	.word	0x20003e4c
 80025a4:	40000c00 	.word	0x40000c00
 80025a8:	20003d80 	.word	0x20003d80
 80025ac:	40010400 	.word	0x40010400
 80025b0:	20003f94 	.word	0x20003f94
 80025b4:	40001800 	.word	0x40001800
 80025b8:	080029ec 	.word	0x080029ec
 80025bc:	20003d7c 	.word	0x20003d7c

080025c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c2:	2003      	movs	r0, #3
 80025c4:	f7fd ffdc 	bl	8000580 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80025c8:	2200      	movs	r2, #0
 80025ca:	4611      	mov	r1, r2
 80025cc:	f06f 000b 	mvn.w	r0, #11
 80025d0:	f7fd ffe8 	bl	80005a4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80025d4:	2200      	movs	r2, #0
 80025d6:	4611      	mov	r1, r2
 80025d8:	f06f 000a 	mvn.w	r0, #10
 80025dc:	f7fd ffe2 	bl	80005a4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80025e0:	2200      	movs	r2, #0
 80025e2:	4611      	mov	r1, r2
 80025e4:	f06f 0009 	mvn.w	r0, #9
 80025e8:	f7fd ffdc 	bl	80005a4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80025ec:	2200      	movs	r2, #0
 80025ee:	4611      	mov	r1, r2
 80025f0:	f06f 0004 	mvn.w	r0, #4
 80025f4:	f7fd ffd6 	bl	80005a4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80025f8:	2200      	movs	r2, #0
 80025fa:	4611      	mov	r1, r2
 80025fc:	f06f 0003 	mvn.w	r0, #3
 8002600:	f7fd ffd0 	bl	80005a4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002604:	2200      	movs	r2, #0
 8002606:	210f      	movs	r1, #15
 8002608:	f06f 0001 	mvn.w	r0, #1
 800260c:	f7fd ffca 	bl	80005a4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002610:	2200      	movs	r2, #0
 8002612:	210f      	movs	r1, #15
 8002614:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002618:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800261c:	f7fd bfc2 	b.w	80005a4 <HAL_NVIC_SetPriority>

08002620 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002620:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8002622:	6802      	ldr	r2, [r0, #0]
 8002624:	4b10      	ldr	r3, [pc, #64]	; (8002668 <HAL_I2C_MspInit+0x48>)
 8002626:	429a      	cmp	r2, r3
 8002628:	d11b      	bne.n	8002662 <HAL_I2C_MspInit+0x42>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800262a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800262e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002630:	2312      	movs	r3, #18
 8002632:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002634:	2301      	movs	r3, #1
 8002636:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002638:	2303      	movs	r3, #3
 800263a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800263c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263e:	eb0d 0103 	add.w	r1, sp, r3
 8002642:	480a      	ldr	r0, [pc, #40]	; (800266c <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002644:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002646:	f7fe f803 	bl	8000650 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <HAL_I2C_MspInit+0x50>)
 8002650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002652:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002662:	b007      	add	sp, #28
 8002664:	f85d fb04 	ldr.w	pc, [sp], #4
 8002668:	40005400 	.word	0x40005400
 800266c:	40020400 	.word	0x40020400
 8002670:	40023800 	.word	0x40023800

08002674 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002674:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8002676:	6802      	ldr	r2, [r0, #0]
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <HAL_SPI_MspInit+0x44>)
 800267a:	429a      	cmp	r2, r3
 800267c:	d119      	bne.n	80026b2 <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800267e:	2100      	movs	r1, #0
 8002680:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8002684:	9100      	str	r1, [sp, #0]
 8002686:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002688:	480c      	ldr	r0, [pc, #48]	; (80026bc <HAL_SPI_MspInit+0x48>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800268a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800268e:	645a      	str	r2, [r3, #68]	; 0x44
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	9103      	str	r1, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800269c:	23e0      	movs	r3, #224	; 0xe0
 800269e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026aa:	2305      	movs	r3, #5
 80026ac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ae:	f7fd ffcf 	bl	8000650 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026b2:	b007      	add	sp, #28
 80026b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80026b8:	40013000 	.word	0x40013000
 80026bc:	40020000 	.word	0x40020000

080026c0 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 80026c0:	6803      	ldr	r3, [r0, #0]
 80026c2:	4a19      	ldr	r2, [pc, #100]	; (8002728 <HAL_TIM_PWM_MspInit+0x68>)
 80026c4:	4293      	cmp	r3, r2
{
 80026c6:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM1)
 80026c8:	d10d      	bne.n	80026e6 <HAL_TIM_PWM_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	4b17      	ldr	r3, [pc, #92]	; (800272c <HAL_TIM_PWM_MspInit+0x6c>)
 80026d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	645a      	str	r2, [r3, #68]	; 0x44
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	9301      	str	r3, [sp, #4]
 80026e0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80026e2:	b004      	add	sp, #16
 80026e4:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM8)
 80026e6:	4a12      	ldr	r2, [pc, #72]	; (8002730 <HAL_TIM_PWM_MspInit+0x70>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d10c      	bne.n	8002706 <HAL_TIM_PWM_MspInit+0x46>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80026ec:	2300      	movs	r3, #0
 80026ee:	9302      	str	r3, [sp, #8]
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <HAL_TIM_PWM_MspInit+0x6c>)
 80026f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026f4:	f042 0202 	orr.w	r2, r2, #2
 80026f8:	645a      	str	r2, [r3, #68]	; 0x44
 80026fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	9302      	str	r3, [sp, #8]
 8002702:	9b02      	ldr	r3, [sp, #8]
 8002704:	e7ed      	b.n	80026e2 <HAL_TIM_PWM_MspInit+0x22>
  else if(htim_pwm->Instance==TIM12)
 8002706:	4a0b      	ldr	r2, [pc, #44]	; (8002734 <HAL_TIM_PWM_MspInit+0x74>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d1ea      	bne.n	80026e2 <HAL_TIM_PWM_MspInit+0x22>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800270c:	2300      	movs	r3, #0
 800270e:	9303      	str	r3, [sp, #12]
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_TIM_PWM_MspInit+0x6c>)
 8002712:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002718:	641a      	str	r2, [r3, #64]	; 0x40
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002720:	9303      	str	r3, [sp, #12]
 8002722:	9b03      	ldr	r3, [sp, #12]
}
 8002724:	e7dd      	b.n	80026e2 <HAL_TIM_PWM_MspInit+0x22>
 8002726:	bf00      	nop
 8002728:	40010000 	.word	0x40010000
 800272c:	40023800 	.word	0x40023800
 8002730:	40010400 	.word	0x40010400
 8002734:	40001800 	.word	0x40001800

08002738 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002738:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM2)
 800273a:	6803      	ldr	r3, [r0, #0]
 800273c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8002740:	b08a      	sub	sp, #40	; 0x28
  if(htim_encoder->Instance==TIM2)
 8002742:	d125      	bne.n	8002790 <HAL_TIM_Encoder_MspInit+0x58>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002744:	2500      	movs	r5, #0
 8002746:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800274a:	9501      	str	r5, [sp, #4]
 800274c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = M1_ENCA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(M1_ENCA_GPIO_Port, &GPIO_InitStruct);
 800274e:	4832      	ldr	r0, [pc, #200]	; (8002818 <HAL_TIM_Encoder_MspInit+0xe0>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002750:	f042 0201 	orr.w	r2, r2, #1
 8002754:	641a      	str	r2, [r3, #64]	; 0x40
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	9508      	str	r5, [sp, #32]
    __HAL_RCC_TIM2_CLK_ENABLE();
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002760:	2401      	movs	r4, #1
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002762:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002764:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = M1_ENCA_Pin;
 8002766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2602      	movs	r6, #2
    HAL_GPIO_Init(M1_ENCA_GPIO_Port, &GPIO_InitStruct);
 800276c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = M1_ENCA_Pin;
 800276e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002770:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002772:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(M1_ENCA_GPIO_Port, &GPIO_InitStruct);
 8002774:	f7fd ff6c 	bl	8000650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_ENCB_Pin;
 8002778:	2308      	movs	r3, #8
 800277a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800277e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002780:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002782:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = M3_ENCA_Pin|M3_ENCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002784:	4825      	ldr	r0, [pc, #148]	; (800281c <HAL_TIM_Encoder_MspInit+0xe4>)
 8002786:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = M2_ENCA_Pin|M2_ENCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002788:	f7fd ff62 	bl	8000650 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800278c:	b00a      	add	sp, #40	; 0x28
 800278e:	bd70      	pop	{r4, r5, r6, pc}
  else if(htim_encoder->Instance==TIM3)
 8002790:	4a23      	ldr	r2, [pc, #140]	; (8002820 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d114      	bne.n	80027c0 <HAL_TIM_Encoder_MspInit+0x88>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002796:	4b23      	ldr	r3, [pc, #140]	; (8002824 <HAL_TIM_Encoder_MspInit+0xec>)
 8002798:	2100      	movs	r1, #0
 800279a:	9102      	str	r1, [sp, #8]
 800279c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800279e:	f042 0202 	orr.w	r2, r2, #2
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	9302      	str	r3, [sp, #8]
 80027ac:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = M0_ENCA_Pin|M0_ENCB_Pin;
 80027ae:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Pin = M3_ENCA_Pin|M3_ENCB_Pin;
 80027b0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027b2:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027b8:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ba:	9108      	str	r1, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027bc:	9309      	str	r3, [sp, #36]	; 0x24
 80027be:	e7e1      	b.n	8002784 <HAL_TIM_Encoder_MspInit+0x4c>
  else if(htim_encoder->Instance==TIM4)
 80027c0:	4a19      	ldr	r2, [pc, #100]	; (8002828 <HAL_TIM_Encoder_MspInit+0xf0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d10d      	bne.n	80027e2 <HAL_TIM_Encoder_MspInit+0xaa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027c6:	4b17      	ldr	r3, [pc, #92]	; (8002824 <HAL_TIM_Encoder_MspInit+0xec>)
 80027c8:	2100      	movs	r1, #0
 80027ca:	9103      	str	r1, [sp, #12]
 80027cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ce:	f042 0204 	orr.w	r2, r2, #4
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	9303      	str	r3, [sp, #12]
 80027dc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = M3_ENCA_Pin|M3_ENCB_Pin;
 80027de:	23c0      	movs	r3, #192	; 0xc0
 80027e0:	e7e6      	b.n	80027b0 <HAL_TIM_Encoder_MspInit+0x78>
  else if(htim_encoder->Instance==TIM5)
 80027e2:	4a12      	ldr	r2, [pc, #72]	; (800282c <HAL_TIM_Encoder_MspInit+0xf4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d1d1      	bne.n	800278c <HAL_TIM_Encoder_MspInit+0x54>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027e8:	2100      	movs	r1, #0
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <HAL_TIM_Encoder_MspInit+0xec>)
 80027ec:	9104      	str	r1, [sp, #16]
 80027ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f0:	4809      	ldr	r0, [pc, #36]	; (8002818 <HAL_TIM_Encoder_MspInit+0xe0>)
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027f2:	f042 0208 	orr.w	r2, r2, #8
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fa:	9108      	str	r1, [sp, #32]
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	9304      	str	r3, [sp, #16]
 8002802:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = M2_ENCA_Pin|M2_ENCB_Pin;
 8002804:	2303      	movs	r3, #3
 8002806:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002808:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800280e:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002810:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002812:	a905      	add	r1, sp, #20
 8002814:	e7b8      	b.n	8002788 <HAL_TIM_Encoder_MspInit+0x50>
 8002816:	bf00      	nop
 8002818:	40020000 	.word	0x40020000
 800281c:	40020400 	.word	0x40020400
 8002820:	40000400 	.word	0x40000400
 8002824:	40023800 	.word	0x40023800
 8002828:	40000800 	.word	0x40000800
 800282c:	40000c00 	.word	0x40000c00

08002830 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002830:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8002832:	6803      	ldr	r3, [r0, #0]
 8002834:	4a1f      	ldr	r2, [pc, #124]	; (80028b4 <HAL_TIM_MspPostInit+0x84>)
 8002836:	4293      	cmp	r3, r2
{
 8002838:	b086      	sub	sp, #24
  if(htim->Instance==TIM1)
 800283a:	d11a      	bne.n	8002872 <HAL_TIM_MspPostInit+0x42>
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = M2_MBH_Pin|M3_MBH_Pin|M3_MAH_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = M2_MBH_Pin|M3_MBH_Pin|M3_MAH_Pin;
 800283e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002842:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002844:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002846:	a901      	add	r1, sp, #4
 8002848:	481b      	ldr	r0, [pc, #108]	; (80028b8 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Pin = M2_MBH_Pin|M3_MBH_Pin|M3_MAH_Pin;
 800284a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002850:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002852:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002854:	f7fd fefc 	bl	8000650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_MAH_Pin;
 8002858:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(M1_MAH_GPIO_Port, &GPIO_InitStruct);
 800285c:	4817      	ldr	r0, [pc, #92]	; (80028bc <HAL_TIM_MspPostInit+0x8c>)
    GPIO_InitStruct.Pin = M1_MAH_Pin;
 800285e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002860:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002864:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002866:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(M1_MAH_GPIO_Port, &GPIO_InitStruct);
 8002868:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = DAH_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
    HAL_GPIO_Init(DAH_GPIO_Port, &GPIO_InitStruct);
 800286a:	f7fd fef1 	bl	8000650 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800286e:	b006      	add	sp, #24
 8002870:	bd70      	pop	{r4, r5, r6, pc}
  else if(htim->Instance==TIM8)
 8002872:	4a13      	ldr	r2, [pc, #76]	; (80028c0 <HAL_TIM_MspPostInit+0x90>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d10c      	bne.n	8002892 <HAL_TIM_MspPostInit+0x62>
    GPIO_InitStruct.Pin = M2_MAH_Pin|M0_MBH_Pin|M1_MBH_Pin|M0_MAH_Pin;
 8002878:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800287c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002886:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002888:	2303      	movs	r3, #3
 800288a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288c:	a901      	add	r1, sp, #4
 800288e:	480d      	ldr	r0, [pc, #52]	; (80028c4 <HAL_TIM_MspPostInit+0x94>)
 8002890:	e7eb      	b.n	800286a <HAL_TIM_MspPostInit+0x3a>
  else if(htim->Instance==TIM12)
 8002892:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <HAL_TIM_MspPostInit+0x98>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d1ea      	bne.n	800286e <HAL_TIM_MspPostInit+0x3e>
    GPIO_InitStruct.Pin = DAH_Pin;
 8002898:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800289c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80028a8:	2309      	movs	r3, #9
 80028aa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DAH_GPIO_Port, &GPIO_InitStruct);
 80028ac:	a901      	add	r1, sp, #4
 80028ae:	4807      	ldr	r0, [pc, #28]	; (80028cc <HAL_TIM_MspPostInit+0x9c>)
 80028b0:	e7db      	b.n	800286a <HAL_TIM_MspPostInit+0x3a>
 80028b2:	bf00      	nop
 80028b4:	40010000 	.word	0x40010000
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40020000 	.word	0x40020000
 80028c0:	40010400 	.word	0x40010400
 80028c4:	40020800 	.word	0x40020800
 80028c8:	40001800 	.word	0x40001800
 80028cc:	40020400 	.word	0x40020400

080028d0 <NMI_Handler>:
 80028d0:	4770      	bx	lr

080028d2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80028d2:	e7fe      	b.n	80028d2 <HardFault_Handler>

080028d4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80028d4:	e7fe      	b.n	80028d4 <MemManage_Handler>

080028d6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80028d6:	e7fe      	b.n	80028d6 <BusFault_Handler>

080028d8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80028d8:	e7fe      	b.n	80028d8 <UsageFault_Handler>

080028da <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80028da:	4770      	bx	lr

080028dc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80028dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028de:	f7fd fe3d 	bl	800055c <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 80028e6:	f7fe bd8c 	b.w	8001402 <osSystickHandler>
	...

080028ec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028ec:	490f      	ldr	r1, [pc, #60]	; (800292c <SystemInit+0x40>)
 80028ee:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80028f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80028fa:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <SystemInit+0x44>)
 80028fc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028fe:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002900:	f042 0201 	orr.w	r2, r2, #1
 8002904:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002906:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800290e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002912:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002914:	4a07      	ldr	r2, [pc, #28]	; (8002934 <SystemInit+0x48>)
 8002916:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800291e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002920:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002922:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002926:	608b      	str	r3, [r1, #8]
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	e000ed00 	.word	0xe000ed00
 8002930:	40023800 	.word	0x40023800
 8002934:	24003010 	.word	0x24003010

08002938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002970 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800293c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800293e:	e003      	b.n	8002948 <LoopCopyDataInit>

08002940 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002942:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002944:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002946:	3104      	adds	r1, #4

08002948 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002948:	480b      	ldr	r0, [pc, #44]	; (8002978 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800294a:	4b0c      	ldr	r3, [pc, #48]	; (800297c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800294c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800294e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002950:	d3f6      	bcc.n	8002940 <CopyDataInit>
  ldr  r2, =_sbss
 8002952:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002954:	e002      	b.n	800295c <LoopFillZerobss>

08002956 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002956:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002958:	f842 3b04 	str.w	r3, [r2], #4

0800295c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800295e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002960:	d3f9      	bcc.n	8002956 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002962:	f7ff ffc3 	bl	80028ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002966:	f000 f811 	bl	800298c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800296a:	f7ff fb97 	bl	800209c <main>
  bx  lr    
 800296e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002970:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002974:	08002a3c 	.word	0x08002a3c
  ldr  r0, =_sdata
 8002978:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800297c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002980:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002984:	20003fd0 	.word	0x20003fd0

08002988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002988:	e7fe      	b.n	8002988 <ADC_IRQHandler>
	...

0800298c <__libc_init_array>:
 800298c:	b570      	push	{r4, r5, r6, lr}
 800298e:	4e0d      	ldr	r6, [pc, #52]	; (80029c4 <__libc_init_array+0x38>)
 8002990:	4c0d      	ldr	r4, [pc, #52]	; (80029c8 <__libc_init_array+0x3c>)
 8002992:	1ba4      	subs	r4, r4, r6
 8002994:	10a4      	asrs	r4, r4, #2
 8002996:	2500      	movs	r5, #0
 8002998:	42a5      	cmp	r5, r4
 800299a:	d109      	bne.n	80029b0 <__libc_init_array+0x24>
 800299c:	4e0b      	ldr	r6, [pc, #44]	; (80029cc <__libc_init_array+0x40>)
 800299e:	4c0c      	ldr	r4, [pc, #48]	; (80029d0 <__libc_init_array+0x44>)
 80029a0:	f000 f818 	bl	80029d4 <_init>
 80029a4:	1ba4      	subs	r4, r4, r6
 80029a6:	10a4      	asrs	r4, r4, #2
 80029a8:	2500      	movs	r5, #0
 80029aa:	42a5      	cmp	r5, r4
 80029ac:	d105      	bne.n	80029ba <__libc_init_array+0x2e>
 80029ae:	bd70      	pop	{r4, r5, r6, pc}
 80029b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029b4:	4798      	blx	r3
 80029b6:	3501      	adds	r5, #1
 80029b8:	e7ee      	b.n	8002998 <__libc_init_array+0xc>
 80029ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029be:	4798      	blx	r3
 80029c0:	3501      	adds	r5, #1
 80029c2:	e7f2      	b.n	80029aa <__libc_init_array+0x1e>
 80029c4:	08002a34 	.word	0x08002a34
 80029c8:	08002a34 	.word	0x08002a34
 80029cc:	08002a34 	.word	0x08002a34
 80029d0:	08002a38 	.word	0x08002a38

080029d4 <_init>:
 80029d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d6:	bf00      	nop
 80029d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029da:	bc08      	pop	{r3}
 80029dc:	469e      	mov	lr, r3
 80029de:	4770      	bx	lr

080029e0 <_fini>:
 80029e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e2:	bf00      	nop
 80029e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e6:	bc08      	pop	{r3}
 80029e8:	469e      	mov	lr, r3
 80029ea:	4770      	bx	lr
